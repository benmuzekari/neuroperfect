<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="https://duke.qualtrics.com/jfe/form/SV_3K0QGy58pfeZaWF?id=24481" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['test'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="https://duke.qualtrics.com/jfe/form/SV_3K0QGy58pfeZaWF?id=24481" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1280, 800]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[-.9,-.9,-.9]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="run_task" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="practice_task">
      <CodeComponent name="add_data">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initalize so we can add data to these variables&amp;#10;prac_trial_num = 0&amp;#10;prac_total_points = 0&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="prac_trial_num = 0;&amp;#10;prac_total_points = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="work_total_presses = 0;&amp;#10;prac_trial_num = (prac_trial_num + 1);&amp;#10;psychoJS.experiment.addData(&quot;mode&quot;, &quot;practice&quot;);&amp;#10;psychoJS.experiment.addData(&quot;prac_trial_num&quot;, prac_trial_num);&amp;#10;psychoJS.experiment.addData(&quot;calibration_total_presses&quot;, calibration_total_presses);&amp;#10;psychoJS.experiment.addData(&quot;maximum_work_for_feedback_threshold&quot;, maximum_work_for_feedback_threshold);&amp;#10;psychoJS.experiment.addData(&quot;final_work_for_feedback_threshold&quot;, final_work_for_feedback_threshold);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# add data&amp;#10;work_total_presses = 0&amp;#10;prac_trial_num = prac_trial_num + 1&amp;#10;psychoJS.experiment.addData('mode', 'practice')&amp;#10;psychoJS.experiment.addData('prac_trial_num', prac_trial_num)&amp;#10;psychoJS.experiment.addData('calibration_total_presses', calibration_total_presses)&amp;#10;psychoJS.experiment.addData('maximum_work_for_feedback_threshold', maximum_work_for_feedback_threshold)&amp;#10;psychoJS.experiment.addData('final_work_for_feedback_threshold', final_work_for_feedback_threshold)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="add_data" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="iti_prac">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val=".01" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="iti_prac" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="cross" valType="str"/>
        <Param name="size" updates="constant" val="(0.05, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$iti" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <ImageComponent name="fractal_one_prac">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$fractal_60_stim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="fractal_one_prac" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(fractal_60_x_pos, fractal_60_y_pos)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.20, 0.20)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$iti_prac.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="fractal_two_prac">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$fractal_80_stim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="fractal_two_prac" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(fractal_80_x_pos, fractal_80_y_pos)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.20, 0.20)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$iti_prac.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_prac">
        <Param name="allowedKeys" updates="set every repeat" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_prac" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$iti_prac.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="outcome_of_trial">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="outcome = [];&amp;#10;side_chosen = [];&amp;#10;fractal_chosen = [];&amp;#10;reward = [];&amp;#10;if ((condition === 1)) {&amp;#10;    if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;        outcome = &quot;good&quot;;&amp;#10;        side_chosen = &quot;left&quot;;&amp;#10;        fractal_chosen = &quot;fractal_60&quot;;&amp;#10;        reward = 1;&amp;#10;        prac_total_points = (prac_total_points + 1);&amp;#10;    } else {&amp;#10;        if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;            outcome = &quot;bad&quot;;&amp;#10;            side_chosen = &quot;left&quot;;&amp;#10;            fractal_chosen = &quot;fractal_60&quot;;&amp;#10;            reward = 0;&amp;#10;            prac_total_points = prac_total_points;&amp;#10;        } else {&amp;#10;            if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;                outcome = &quot;good&quot;;&amp;#10;                side_chosen = &quot;right&quot;;&amp;#10;                fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                reward = 1;&amp;#10;                prac_total_points = (prac_total_points + 1);&amp;#10;            } else {&amp;#10;                if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;                    outcome = &quot;bad&quot;;&amp;#10;                    side_chosen = &quot;right&quot;;&amp;#10;                    fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                    reward = 0;&amp;#10;                    prac_total_points = prac_total_points;&amp;#10;                } else {&amp;#10;                    if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                        outcome = &quot;good&quot;;&amp;#10;                        side_chosen = &quot;left&quot;;&amp;#10;                        fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                        reward = 1;&amp;#10;                        prac_total_points = (prac_total_points + 1);&amp;#10;                    } else {&amp;#10;                        if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                            outcome = &quot;bad&quot;;&amp;#10;                            side_chosen = &quot;left&quot;;&amp;#10;                            fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                            reward = 0;&amp;#10;                            prac_total_points = prac_total_points;&amp;#10;                        } else {&amp;#10;                            if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                                outcome = &quot;good&quot;;&amp;#10;                                side_chosen = &quot;right&quot;;&amp;#10;                                fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                reward = 1;&amp;#10;                                prac_total_points = (prac_total_points + 1);&amp;#10;                            } else {&amp;#10;                                if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                                    outcome = &quot;bad&quot;;&amp;#10;                                    side_chosen = &quot;right&quot;;&amp;#10;                                    fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                    reward = 0;&amp;#10;                                    prac_total_points = prac_total_points;&amp;#10;                                } else {&amp;#10;                                    outcome = &quot;missed&quot;;&amp;#10;                                    side_chosen = &quot;n/a&quot;;&amp;#10;                                    fractal_chosen = &quot;n/a&quot;;&amp;#10;                                    reward = 0;&amp;#10;                                    prac_total_points = prac_total_points;&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;            outcome = &quot;good&quot;;&amp;#10;            side_chosen = &quot;left&quot;;&amp;#10;            fractal_chosen = &quot;fractal_60&quot;;&amp;#10;            reward = 1;&amp;#10;            prac_total_points = (prac_total_points + 1);&amp;#10;        } else {&amp;#10;            if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;                outcome = &quot;bad&quot;;&amp;#10;                side_chosen = &quot;left&quot;;&amp;#10;                fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                reward = 0;&amp;#10;                prac_total_points = prac_total_points;&amp;#10;            } else {&amp;#10;                if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;                    outcome = &quot;good&quot;;&amp;#10;                    side_chosen = &quot;right&quot;;&amp;#10;                    fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                    reward = 1;&amp;#10;                    prac_total_points = (prac_total_points + 1);&amp;#10;                } else {&amp;#10;                    if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;                        outcome = &quot;bad&quot;;&amp;#10;                        side_chosen = &quot;right&quot;;&amp;#10;                        fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                        reward = 0;&amp;#10;                        prac_total_points = prac_total_points;&amp;#10;                    } else {&amp;#10;                        if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                            outcome = &quot;good&quot;;&amp;#10;                            side_chosen = &quot;left&quot;;&amp;#10;                            fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                            reward = 1;&amp;#10;                            prac_total_points = (prac_total_points + 1);&amp;#10;                        } else {&amp;#10;                            if ((((key_resp_prac.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                                outcome = &quot;bad&quot;;&amp;#10;                                side_chosen = &quot;left&quot;;&amp;#10;                                fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                reward = 0;&amp;#10;                                prac_total_points = prac_total_points;&amp;#10;                            } else {&amp;#10;                                if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                                    outcome = &quot;good&quot;;&amp;#10;                                    side_chosen = &quot;right&quot;;&amp;#10;                                    fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                    reward = 1;&amp;#10;                                    prac_total_points = (prac_total_points + 1);&amp;#10;                                } else {&amp;#10;                                    if ((((key_resp_prac.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                                        outcome = &quot;bad&quot;;&amp;#10;                                        side_chosen = &quot;right&quot;;&amp;#10;                                        fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                        reward = 0;&amp;#10;                                        prac_total_points = prac_total_points;&amp;#10;                                    } else {&amp;#10;                                        outcome = &quot;missed&quot;;&amp;#10;                                        side_chosen = &quot;n/a&quot;;&amp;#10;                                        fractal_chosen = &quot;n/a&quot;;&amp;#10;                                        reward = 0;&amp;#10;                                        prac_total_points = prac_total_points;&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;side_chosen&quot;, side_chosen);&amp;#10;psychoJS.experiment.addData(&quot;fractal_chosen&quot;, fractal_chosen);&amp;#10;psychoJS.experiment.addData(&quot;reward&quot;, reward);&amp;#10;psychoJS.experiment.addData(&quot;total_points&quot;, prac_total_points);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# initialize empty lists for data&amp;#10;outcome = []&amp;#10;side_chosen = []&amp;#10;fractal_chosen = []&amp;#10;reward = []&amp;#10;&amp;#10;# outcome algorithm based on response and condition&amp;#10;if condition == 1:&amp;#10;    if key_resp_prac.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;&amp;#10;    elif key_resp_prac.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;        &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;&amp;#10;    elif key_resp_prac.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;    &amp;#10;    elif key_resp_prac.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;    &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;    &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;    &amp;#10;    else:&amp;#10;        outcome = 'missed'&amp;#10;        side_chosen = 'n/a'&amp;#10;        fractal_chosen = 'n/a'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;        &amp;#10;elif condition == 2:&amp;#10;    if key_resp_prac.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_prac.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;&amp;#10;    elif key_resp_prac.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;    &amp;#10;    elif key_resp_prac.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_prac.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;    &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        prac_total_points = prac_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_prac.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;        &amp;#10;    else:&amp;#10;        outcome = 'missed'&amp;#10;        side_chosen = 'n/a'&amp;#10;        fractal_chosen = 'n/a'&amp;#10;        reward = 0&amp;#10;        prac_total_points = prac_total_points&amp;#10;        &amp;#10;        &amp;#10;# add data&amp;#10;psychoJS.experiment.addData('side_chosen', side_chosen)&amp;#10;psychoJS.experiment.addData('fractal_chosen', fractal_chosen)&amp;#10;psychoJS.experiment.addData('reward', reward)&amp;#10;psychoJS.experiment.addData('total_points', prac_total_points)&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="outcome_of_trial" valType="code"/>
      </CodeComponent>
      <CodeComponent name="feedback_practice_logic_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="decision_to_work_for_feedback = [];&amp;#10;time_of_press_list = [];&amp;#10;current_work_rate_list = [];&amp;#10;current_opacity_level_list = [];&amp;#10;final_opacity_level = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# initialize empty lists so we can add data&amp;#10;decision_to_work_for_feedback = []&amp;#10;time_of_press_list = []&amp;#10;current_work_rate_list = []&amp;#10;current_opacity_level_list = []&amp;#10;final_opacity_level = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="load_feedback_stim_to_draw = [];&amp;#10;if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;good&quot;)) &amp;&amp; (condition === 1))) {&amp;#10;    decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;    load_feedback_stim_to_draw = vertical_feedback_stim;&amp;#10;} else {&amp;#10;    if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;bad&quot;)) &amp;&amp; (condition === 1))) {&amp;#10;        decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;        load_feedback_stim_to_draw = horizontal_feedback_stim;&amp;#10;    } else {&amp;#10;        if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;good&quot;)) &amp;&amp; (condition === 2))) {&amp;#10;            decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;            load_feedback_stim_to_draw = horizontal_feedback_stim;&amp;#10;        } else {&amp;#10;            if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;bad&quot;)) &amp;&amp; (condition === 2))) {&amp;#10;                decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;                load_feedback_stim_to_draw = vertical_feedback_stim;&amp;#10;            } else {&amp;#10;                if ((outcome === &quot;missed&quot;)) {&amp;#10;                    decision_to_work_for_feedback = &quot;missed_trial&quot;;&amp;#10;                } else {&amp;#10;                    if ((feedback_outcome === &quot;no_feedback&quot;)) {&amp;#10;                        decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;                        load_feedback_stim_to_draw = grey_no_feedback_stim;&amp;#10;                    } else {&amp;#10;                        if ((feedback_outcome === &quot;work_option&quot;)) {&amp;#10;                            decision_to_work_for_feedback = &quot;probe&quot;;&amp;#10;                            load_feedback_stim_to_draw = grey_no_feedback_stim;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;do_not_do_feedback = [];&amp;#10;do_feedback = [];&amp;#10;if ((decision_to_work_for_feedback === &quot;n/a&quot;)) {&amp;#10;    do_not_do_feedback = 1;&amp;#10;    do_feedback = 0;&amp;#10;    draw_miss = 0;&amp;#10;} else {&amp;#10;    if ((decision_to_work_for_feedback === &quot;probe&quot;)) {&amp;#10;        do_not_do_feedback = 0;&amp;#10;        do_feedback = 1;&amp;#10;        draw_miss = 0;&amp;#10;    } else {&amp;#10;        if ((decision_to_work_for_feedback === &quot;missed_trial&quot;)) {&amp;#10;            do_not_do_feedback = 0;&amp;#10;            do_feedback = 0;&amp;#10;            draw_miss = 1;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# initialize feedback stim to draw &amp;#10;load_feedback_stim_to_draw = []&amp;#10;&amp;#10;# draw feedback logic&amp;#10;if feedback_outcome == 'veridical_feedback' and outcome == 'good' and condition == 1:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = vertical_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'bad' and condition == 1:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = horizontal_feedback_stim&amp;#10;    &amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'good' and condition == 2:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = horizontal_feedback_stim&amp;#10;    &amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'bad' and condition == 2:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = vertical_feedback_stim&amp;#10;    &amp;#10;elif outcome == 'missed':&amp;#10;    decision_to_work_for_feedback = 'missed_trial'&amp;#10;&amp;#10;elif feedback_outcome == 'no_feedback':&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = grey_no_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'work_option':&amp;#10;    decision_to_work_for_feedback = 'probe'&amp;#10;    load_feedback_stim_to_draw = grey_no_feedback_stim&amp;#10;    &amp;#10;# initalize empty lists to help branch experiment&amp;#10;do_not_do_feedback = []&amp;#10;do_feedback = []&amp;#10;&amp;#10;if decision_to_work_for_feedback == 'n/a':&amp;#10;    do_not_do_feedback = 1&amp;#10;    do_feedback = 0&amp;#10;    draw_miss = 0&amp;#10;    &amp;#10;elif decision_to_work_for_feedback == 'probe':&amp;#10;    do_not_do_feedback = 0&amp;#10;    do_feedback = 1&amp;#10;    draw_miss = 0&amp;#10;    &amp;#10;elif decision_to_work_for_feedback == 'missed_trial':&amp;#10;    do_not_do_feedback = 0&amp;#10;    do_feedback = 0&amp;#10;    draw_miss = 1&amp;#10;    " valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback_practice_logic_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback_practice">
      <CodeComponent name="feedback">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="get_press_rate">
      <CodeComponent name="calibration">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="calibration" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_part_4">
      <ImageComponent name="instructions_part_four">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$instructions_pages_part_four" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instructions_part_four" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="1.0" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="advance_instructions_2">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="advance_instructions_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="start_practice">
      <CodeComponent name="start_practice_custom">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(True)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="start_practice_custom" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_22">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_22" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="work_for_feeback_post_trial">
      <CodeComponent name="work_for_feedback_algorithm">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;starting_opacity = 1;&amp;#10;update_opacity = 0.015;&amp;#10;work_total_presses = 0;&amp;#10;current_work_rate = 0;&amp;#10;grey_no_feedback_stim.opacity = 1;&amp;#10;if ((allow_work === true)) {&amp;#10;    timer.reset();&amp;#10;    while ((timer.getTime() &lt; 3.5)) {&amp;#10;        current_time = timer.getTime();&amp;#10;        key = kb.getKeys();&amp;#10;        if (_pj.in_es6(&quot;space&quot;, key)) {&amp;#10;            work_total_presses = (work_total_presses + 1);&amp;#10;            current_work_rate = (work_total_presses / current_time);&amp;#10;            if ((current_work_rate &gt; final_work_for_feedback_threshold)) {&amp;#10;                grey_no_feedback_stim.opacity = (grey_no_feedback_stim.opacity - update_opacity);&amp;#10;                grey_no_feedback_stim.draw();&amp;#10;                win.flip();&amp;#10;            }&amp;#10;        }&amp;#10;        horizontal_feedback_stim.draw();&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# set work for feedback parameters&amp;#10;starting_opacity = 1&amp;#10;update_opacity = .015&amp;#10;&amp;#10;work_total_presses = 0&amp;#10;current_work_rate = 0&amp;#10;grey_no_feedback_stim.opacity = 1&amp;#10;&amp;#10;if allow_work == True:&amp;#10;&amp;#10;    timer.reset()&amp;#10;    while timer.getTime() &lt; 3.5:&amp;#10;    &amp;#10;        current_time = timer.getTime()&amp;#10;        key = kb.getKeys()&amp;#10;    &amp;#10;        if 'space' in key:&amp;#10;        &amp;#10;            work_total_presses = work_total_presses + 1&amp;#10;            current_work_rate = work_total_presses / current_time&amp;#10;        &amp;#10;            if current_work_rate &gt; final_work_for_feedback_threshold:&amp;#10;                grey_no_feedback_stim.opacity = grey_no_feedback_stim.opacity - update_opacity&amp;#10;                grey_no_feedback_stim.draw()&amp;#10;                win.flip()&amp;#10;&amp;#10;        horizontal_feedback_stim.draw()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="work_for_feedback_algorithm" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="work_for_feedback_post_trial">
      <CodeComponent name="feedback_algorithm">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback_algorithm" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="second_quiz">
      <CodeComponent name="quiz_again">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initialize empty lists so we can add data&amp;#10;second_stim_quiz_first_question_result = []&amp;#10;second_stim_quiz_second_question_result = []&amp;#10;second_stim_quiz_third_question_result = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="second_stim_quiz_first_question_result = [];&amp;#10;second_stim_quiz_second_question_result = [];&amp;#10;second_stim_quiz_third_question_result = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_thirteen.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_thirteen.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_thirteen.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_thirteen.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="quiz_again" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="start_second_quiz">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="start_second_quiz" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SAM_ecc_question"/>
    <Routine name="SAM_hu_question">
      <ImageComponent name="SAM_hu">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_hu.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="SAM_hu" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="choice_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.30, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_8">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_9">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.3, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <MouseComponent name="select_answer_mouse_sam_hu">
        <Param name="clickable" updates="constant" val="choice_1,choice_2,choice_3,choice_4,choice_5,choice_6,choice_7,choice_8,choice_9" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="select_answer_mouse_sam_hu" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="final" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <CodeComponent name="get_answer_to_highlight">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw = [];&amp;#10;for (var answer, _pj_c = 0, _pj_a = [choice_1, choice_2, choice_3, choice_4, choice_5, choice_6, choice_7, choice_8, choice_9], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    answer = _pj_a[_pj_c];&amp;#10;    if (select_answer_mouse_sam_hu.isPressedIn(answer)) {&amp;#10;        answer_to_draw = answer;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw = []&amp;#10;for answer in [choice_1,choice_2,choice_3,choice_4,choice_5,choice_6,choice_7,choice_8,choice_9]:&amp;#10;    if select_answer_mouse_sam_hu.isPressedIn(answer):&amp;#10;        answer_to_draw = answer" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="get_answer_to_highlight" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="SAM_hu_directions">
      <ImageComponent name="SAM_hu_instructions">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_hu_ins.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="SAM_hu_instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="SAM_hu_instructions_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="SAM_hu_instructions_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SAM_ec_directions">
      <ImageComponent name="SAM_ec_instructions">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_ec_ins.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="SAM_ec_instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="SAM_ec_instructions_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="SAM_ec_instructions_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SAM_ec_question">
      <ImageComponent name="SAM_ec">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_ec.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="SAM_ec" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="choice_num_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.30, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_7">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_8">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_9">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.3, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <MouseComponent name="select_answer_mouse_sam_ec">
        <Param name="clickable" updates="constant" val="choice_num_1,choice_num_2,choice_num_3,choice_num_4,choice_num_5,choice_num_6,choice_num_7,choice_num_8,choice_num_9" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="select_answer_mouse_sam_ec" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="final" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <CodeComponent name="get_answer_to_highlight_pre_sam_ec">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw = [];&amp;#10;for (var answer, _pj_c = 0, _pj_a = [choice_num_1, choice_num_2, choice_num_3, choice_num_4, choice_num_5, choice_num_6, choice_num_7, choice_num_8, choice_num_9], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    answer = _pj_a[_pj_c];&amp;#10;    if (select_answer_mouse_sam_ec.isPressedIn(answer)) {&amp;#10;        answer_to_draw = answer;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw = []&amp;#10;for answer in [choice_num_1,choice_num_2,choice_num_3,choice_num_4,choice_num_5,choice_num_6,choice_num_7,choice_num_8,choice_num_9]:&amp;#10;    if select_answer_mouse_sam_ec.isPressedIn(answer):&amp;#10;        answer_to_draw = answer" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="get_answer_to_highlight_pre_sam_ec" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="first_quiz">
      <CodeComponent name="stim_quiz">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="stim_quiz" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="post_task_fractal_question">
      <CodeComponent name="post_task_slides">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="better_fractal = [];&amp;#10;if ((post_task_fractal_selection === 1)) {&amp;#10;    fractal_blossom.pos = [(- 0.2), 0.04];&amp;#10;    fractal_octopus.pos = [0.2, 0.04];&amp;#10;    post_task_fractal_slide.setAutoDraw(true);&amp;#10;    fractal_blossom.setAutoDraw(true);&amp;#10;    fractal_octopus.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((post_task_fractal_selection === 2)) {&amp;#10;        fractal_blossom.pos = [0.2, 0.04];&amp;#10;        fractal_octopus.pos = [(- 0.2), 0.04];&amp;#10;        post_task_fractal_slide.setAutoDraw(true);&amp;#10;        fractal_blossom.setAutoDraw(true);&amp;#10;        fractal_octopus.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="better_fractal = []&amp;#10;&amp;#10;if post_task_fractal_selection == 1:&amp;#10;      &amp;#10;    fractal_blossom.pos = [-0.2, .04]&amp;#10;    fractal_octopus.pos = [0.2, .04]&amp;#10;    post_task_fractal_slide.setAutoDraw(True)&amp;#10;    fractal_blossom.setAutoDraw(True)&amp;#10;    fractal_octopus.setAutoDraw(True)&amp;#10;&amp;#10;elif post_task_fractal_selection == 2:&amp;#10;&amp;#10;    fractal_blossom.pos = [0.2, .04]&amp;#10;    fractal_octopus.pos = [-0.2, .04]&amp;#10;    post_task_fractal_slide.setAutoDraw(True)&amp;#10;    fractal_blossom.setAutoDraw(True)&amp;#10;    fractal_octopus.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="better_fractal = [];&amp;#10;if ((post_task_fractal_selection === 1)) {&amp;#10;    fractal_blossom.pos = [0.2, 0.04];&amp;#10;    fractal_octopus.pos = [(- 0.2), 0.04];&amp;#10;    post_task_fractal_slide.setAutoDraw(false);&amp;#10;    fractal_blossom.setAutoDraw(false);&amp;#10;    fractal_octopus.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((post_task_fractal_selection === 2)) {&amp;#10;        fractal_blossom.pos = [(- 0.2), 0.04];&amp;#10;        fractal_octopus.pos = [0.2, 0.04];&amp;#10;        post_task_fractal_slide.setAutoDraw(false);&amp;#10;        fractal_blossom.setAutoDraw(false);&amp;#10;        fractal_octopus.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;if (((post_task_fractal_selection === 1) &amp;&amp; (choose_fractal.keys === &quot;1&quot;))) {&amp;#10;    better_fractal = &quot;blossom&quot;;&amp;#10;} else {&amp;#10;    if (((post_task_fractal_selection === 1) &amp;&amp; (choose_fractal.keys === &quot;2&quot;))) {&amp;#10;        better_fractal = &quot;octopus&quot;;&amp;#10;    } else {&amp;#10;        if (((post_task_fractal_selection === 2) &amp;&amp; (choose_fractal.keys === &quot;1&quot;))) {&amp;#10;            better_fractal = &quot;octopus&quot;;&amp;#10;        } else {&amp;#10;            if (((post_task_fractal_selection === 2) &amp;&amp; (choose_fractal.keys === &quot;2&quot;))) {&amp;#10;                better_fractal = &quot;blossom&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;better_fractal&quot;, better_fractal);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="better_fractal = []&amp;#10;&amp;#10;if post_task_fractal_selection == 1:&amp;#10;      &amp;#10;    fractal_blossom.pos = [0.2, .04]&amp;#10;    fractal_octopus.pos = [-0.2, .04]&amp;#10;    post_task_fractal_slide.setAutoDraw(False)&amp;#10;    fractal_blossom.setAutoDraw(False)&amp;#10;    fractal_octopus.setAutoDraw(False)&amp;#10;&amp;#10;elif post_task_fractal_selection == 2:&amp;#10;&amp;#10;    fractal_blossom.pos = [-0.2, .04]&amp;#10;    fractal_octopus.pos = [0.2, .04]&amp;#10;    post_task_fractal_slide.setAutoDraw(False)&amp;#10;    fractal_blossom.setAutoDraw(False)&amp;#10;    fractal_octopus.setAutoDraw(False)&amp;#10;&amp;#10;if post_task_fractal_selection == 1 and choose_fractal.keys == '1':&amp;#10;    better_fractal = 'blossom'&amp;#10;elif post_task_fractal_selection == 1 and choose_fractal.keys == '2':&amp;#10;    better_fractal = 'octopus'       &amp;#10;elif post_task_fractal_selection == 2 and choose_fractal.keys == '1':&amp;#10;    better_fractal = 'octopus'&amp;#10;elif post_task_fractal_selection == 2 and choose_fractal.keys == '2':&amp;#10;    better_fractal = 'blossom'   &amp;#10;&amp;#10;psychoJS.experiment.addData('better_fractal', better_fractal)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="post_task_slides" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="choose_fractal">
        <Param name="allowedKeys" updates="constant" val="'1','2'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="choose_fractal" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="total_points_end_experiment">
      <TextComponent name="final_total_points">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="final_total_points" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.07, .03)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$main_total_points" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="rest_of_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="rest_of_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.01)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You have earned         out of a possible 160 points.&amp;#10;&amp;#10;Please click any button to exit." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="exit_task">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="exit_task" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SAM_hu_question_2">
      <ImageComponent name="SAM_hu_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_hu.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="SAM_hu_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="choice_1_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_1_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.30, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_2_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_2_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_3_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_3_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_4_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_4_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_5_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_5_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_6_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_6_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_7_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_7_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_8_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_8_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_9_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_9_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.3, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <MouseComponent name="select_answer_mouse_3">
        <Param name="clickable" updates="constant" val="choice_1_post,choice_2_post,choice_3_post,choice_4_post,choice_5_post,choice_6_post,choice_7_post,choice_8_post,choice_9_post" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="select_answer_mouse_3" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="final" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <CodeComponent name="post_hu_highlight_select">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw = [];&amp;#10;for (var answer, _pj_c = 0, _pj_a = [choice_1_post, choice_2_post, choice_3_post, choice_4_post, choice_5_post, choice_6_post, choice_7_post, choice_8_post, choice_9_post], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    answer = _pj_a[_pj_c];&amp;#10;    if (select_answer_mouse_3.isPressedIn(answer)) {&amp;#10;        answer_to_draw = answer;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw = []&amp;#10;for answer in [choice_1_post,choice_2_post,choice_3_post,choice_4_post,choice_5_post,choice_6_post,choice_7_post,choice_8_post,choice_9_post]:&amp;#10;    if select_answer_mouse_3.isPressedIn(answer):&amp;#10;        answer_to_draw = answer" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="post_hu_highlight_select" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="SAM_ec_question_2">
      <ImageComponent name="SAM_ec_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_ec.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="SAM_ec_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="choice_num_1_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_1_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.30, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_2_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_2_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_3_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_3_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_4_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_4_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_5_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_5_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_6_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_6_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.07, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_7_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_7_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.15, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_8_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_8_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.22, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="choice_num_9_post">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-.9,-.9,-.9]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="100" valType="int"/>
        <Param name="name" updates="None" val="choice_num_9_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(.3, -.18)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.03, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <MouseComponent name="select_answer_mouse_4">
        <Param name="clickable" updates="constant" val="choice_num_1_post,choice_num_2_post,choice_num_3_post,choice_num_4_post,choice_num_5_post,choice_num_6_post,choice_num_7_post,choice_num_8_post,choice_num_9_post" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="select_answer_mouse_4" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="final" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <CodeComponent name="get_post_sam_ec_to_highlight">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw = [];&amp;#10;for (var answer, _pj_c = 0, _pj_a = [choice_num_1_post, choice_num_2_post, choice_num_3_post, choice_num_4_post, choice_num_5_post, choice_num_6_post, choice_num_7_post, choice_num_8_post, choice_num_9_post], _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    answer = _pj_a[_pj_c];&amp;#10;    if (select_answer_mouse_4.isPressedIn(answer)) {&amp;#10;        answer_to_draw = answer;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw = []&amp;#10;for answer in [choice_num_1_post,choice_num_2_post,choice_num_3_post,choice_num_4_post,choice_num_5_post,choice_num_6_post,choice_num_7_post,choice_num_8_post,choice_num_9_post]:&amp;#10;    if select_answer_mouse_4.isPressedIn(answer):&amp;#10;        answer_to_draw = answer" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="get_post_sam_ec_to_highlight" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="main_task">
      <CodeComponent name="add_data_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initalize so we can add data to these variables&amp;#10;main_trial_num = 0&amp;#10;main_total_points = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="main_trial_num = 0;&amp;#10;main_total_points = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="work_total_presses = 0;&amp;#10;main_trial_num = (main_trial_num + 1);&amp;#10;psychoJS.experiment.addData(&quot;mode&quot;, &quot;main&quot;);&amp;#10;psychoJS.experiment.addData(&quot;main_trial_num&quot;, main_trial_num);&amp;#10;psychoJS.experiment.addData(&quot;calibration_total_presses&quot;, calibration_total_presses);&amp;#10;psychoJS.experiment.addData(&quot;maximum_work_for_feedback_threshold&quot;, maximum_work_for_feedback_threshold);&amp;#10;psychoJS.experiment.addData(&quot;final_work_for_feedback_threshold&quot;, final_work_for_feedback_threshold);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# add data&amp;#10;work_total_presses = 0&amp;#10;main_trial_num = main_trial_num + 1&amp;#10;psychoJS.experiment.addData('mode', 'main')&amp;#10;psychoJS.experiment.addData('main_trial_num', main_trial_num)&amp;#10;psychoJS.experiment.addData('calibration_total_presses', calibration_total_presses)&amp;#10;psychoJS.experiment.addData('maximum_work_for_feedback_threshold', maximum_work_for_feedback_threshold)&amp;#10;psychoJS.experiment.addData('final_work_for_feedback_threshold', final_work_for_feedback_threshold)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="add_data_2" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="iti_main">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val=".01" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="iti_main" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="cross" valType="str"/>
        <Param name="size" updates="constant" val="(0.05, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$iti" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <ImageComponent name="fractal_one_main">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$fractal_60_stim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="fractal_one_main" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(fractal_60_x_pos, fractal_60_y_pos)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.20, 0.20)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$iti_main.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="fractal_two_main">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$fractal_80_stim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="fractal_two_main" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(fractal_80_x_pos, fractal_80_y_pos)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.20, 0.20)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$iti_main.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_main">
        <Param name="allowedKeys" updates="set every repeat" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_main" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$iti_main.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="outcome_of_trial_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="outcome = [];&amp;#10;side_chosen = [];&amp;#10;fractal_chosen = [];&amp;#10;reward = [];&amp;#10;if ((condition === 1)) {&amp;#10;    if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;        outcome = &quot;good&quot;;&amp;#10;        side_chosen = &quot;left&quot;;&amp;#10;        fractal_chosen = &quot;fractal_60&quot;;&amp;#10;        reward = 1;&amp;#10;        main_total_points = (main_total_points + 1);&amp;#10;    } else {&amp;#10;        if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;            outcome = &quot;bad&quot;;&amp;#10;            side_chosen = &quot;left&quot;;&amp;#10;            fractal_chosen = &quot;fractal_60&quot;;&amp;#10;            reward = 0;&amp;#10;            main_total_points = main_total_points;&amp;#10;        } else {&amp;#10;            if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;                outcome = &quot;good&quot;;&amp;#10;                side_chosen = &quot;right&quot;;&amp;#10;                fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                reward = 1;&amp;#10;                main_total_points = (main_total_points + 1);&amp;#10;            } else {&amp;#10;                if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;                    outcome = &quot;bad&quot;;&amp;#10;                    side_chosen = &quot;right&quot;;&amp;#10;                    fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                    reward = 0;&amp;#10;                    main_total_points = main_total_points;&amp;#10;                } else {&amp;#10;                    if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                        outcome = &quot;good&quot;;&amp;#10;                        side_chosen = &quot;left&quot;;&amp;#10;                        fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                        reward = 1;&amp;#10;                        main_total_points = (main_total_points + 1);&amp;#10;                    } else {&amp;#10;                        if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                            outcome = &quot;bad&quot;;&amp;#10;                            side_chosen = &quot;left&quot;;&amp;#10;                            fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                            reward = 0;&amp;#10;                            main_total_points = main_total_points;&amp;#10;                        } else {&amp;#10;                            if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                                outcome = &quot;good&quot;;&amp;#10;                                side_chosen = &quot;right&quot;;&amp;#10;                                fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                reward = 1;&amp;#10;                                main_total_points = (main_total_points + 1);&amp;#10;                            } else {&amp;#10;                                if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                                    outcome = &quot;bad&quot;;&amp;#10;                                    side_chosen = &quot;right&quot;;&amp;#10;                                    fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                    reward = 0;&amp;#10;                                    main_total_points = main_total_points;&amp;#10;                                } else {&amp;#10;                                    outcome = &quot;missed&quot;;&amp;#10;                                    side_chosen = &quot;n/a&quot;;&amp;#10;                                    fractal_chosen = &quot;n/a&quot;;&amp;#10;                                    reward = 0;&amp;#10;                                    main_total_points = main_total_points;&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;            outcome = &quot;good&quot;;&amp;#10;            side_chosen = &quot;left&quot;;&amp;#10;            fractal_chosen = &quot;fractal_60&quot;;&amp;#10;            reward = 1;&amp;#10;            main_total_points = (main_total_points + 1);&amp;#10;        } else {&amp;#10;            if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_60_side === &quot;left&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;                outcome = &quot;bad&quot;;&amp;#10;                side_chosen = &quot;left&quot;;&amp;#10;                fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                reward = 0;&amp;#10;                main_total_points = main_total_points;&amp;#10;            } else {&amp;#10;                if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 1))) {&amp;#10;                    outcome = &quot;good&quot;;&amp;#10;                    side_chosen = &quot;right&quot;;&amp;#10;                    fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                    reward = 1;&amp;#10;                    main_total_points = (main_total_points + 1);&amp;#10;                } else {&amp;#10;                    if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_60_side === &quot;right&quot;)) &amp;&amp; (fractal_60_reward === 0))) {&amp;#10;                        outcome = &quot;bad&quot;;&amp;#10;                        side_chosen = &quot;right&quot;;&amp;#10;                        fractal_chosen = &quot;fractal_60&quot;;&amp;#10;                        reward = 0;&amp;#10;                        main_total_points = main_total_points;&amp;#10;                    } else {&amp;#10;                        if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                            outcome = &quot;good&quot;;&amp;#10;                            side_chosen = &quot;left&quot;;&amp;#10;                            fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                            reward = 1;&amp;#10;                            main_total_points = (main_total_points + 1);&amp;#10;                        } else {&amp;#10;                            if ((((key_resp_main.keys === &quot;f&quot;) &amp;&amp; (fractal_80_side === &quot;left&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                                outcome = &quot;bad&quot;;&amp;#10;                                side_chosen = &quot;left&quot;;&amp;#10;                                fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                reward = 0;&amp;#10;                                main_total_points = main_total_points;&amp;#10;                            } else {&amp;#10;                                if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 1))) {&amp;#10;                                    outcome = &quot;good&quot;;&amp;#10;                                    side_chosen = &quot;right&quot;;&amp;#10;                                    fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                    reward = 1;&amp;#10;                                    main_total_points = (main_total_points + 1);&amp;#10;                                } else {&amp;#10;                                    if ((((key_resp_main.keys === &quot;j&quot;) &amp;&amp; (fractal_80_side === &quot;right&quot;)) &amp;&amp; (fractal_80_reward === 0))) {&amp;#10;                                        outcome = &quot;bad&quot;;&amp;#10;                                        side_chosen = &quot;right&quot;;&amp;#10;                                        fractal_chosen = &quot;fractal_80&quot;;&amp;#10;                                        reward = 0;&amp;#10;                                        main_total_points = main_total_points;&amp;#10;                                    } else {&amp;#10;                                        outcome = &quot;missed&quot;;&amp;#10;                                        side_chosen = &quot;n/a&quot;;&amp;#10;                                        fractal_chosen = &quot;n/a&quot;;&amp;#10;                                        reward = 0;&amp;#10;                                        main_total_points = main_total_points;&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;side_chosen&quot;, side_chosen);&amp;#10;psychoJS.experiment.addData(&quot;fractal_chosen&quot;, fractal_chosen);&amp;#10;psychoJS.experiment.addData(&quot;reward&quot;, reward);&amp;#10;psychoJS.experiment.addData(&quot;total_points&quot;, main_total_points);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# initialize empty lists for data&amp;#10;outcome = []&amp;#10;side_chosen = []&amp;#10;fractal_chosen = []&amp;#10;reward = []&amp;#10;&amp;#10;# algorithm based on response and condition&amp;#10;if condition == 1:&amp;#10;    if key_resp_main.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;&amp;#10;    elif key_resp_main.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;        &amp;#10;    elif key_resp_main.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_main.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;&amp;#10;    elif key_resp_main.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;    &amp;#10;    elif key_resp_main.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;    &amp;#10;    elif key_resp_main.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;    &amp;#10;    elif key_resp_main.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;        &amp;#10;    else:&amp;#10;        outcome = 'missed'&amp;#10;        side_chosen = 'n/a'&amp;#10;        fractal_chosen = 'n/a'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;        &amp;#10;elif condition == 2:&amp;#10;    if key_resp_main.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_main.keys == 'f' and fractal_60_side == 'left' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;&amp;#10;    elif key_resp_main.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_main.keys == 'j' and fractal_60_side == 'right' and fractal_60_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_60'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;    &amp;#10;    elif key_resp_main.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_main.keys == 'f' and fractal_80_side == 'left' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'left'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;    &amp;#10;    elif key_resp_main.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 1:&amp;#10;        outcome = 'good'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 1&amp;#10;        main_total_points = main_total_points + 1&amp;#10;        &amp;#10;    elif key_resp_main.keys == 'j' and fractal_80_side == 'right' and fractal_80_reward == 0:&amp;#10;        outcome = 'bad'&amp;#10;        side_chosen = 'right'&amp;#10;        fractal_chosen = 'fractal_80'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;        &amp;#10;    else:&amp;#10;        outcome = 'missed'&amp;#10;        side_chosen = 'n/a'&amp;#10;        fractal_chosen = 'n/a'&amp;#10;        reward = 0&amp;#10;        main_total_points = main_total_points&amp;#10;        &amp;#10;# add data&amp;#10;psychoJS.experiment.addData('side_chosen', side_chosen)&amp;#10;psychoJS.experiment.addData('fractal_chosen', fractal_chosen)&amp;#10;psychoJS.experiment.addData('reward', reward)&amp;#10;psychoJS.experiment.addData('total_points', main_total_points)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="outcome_of_trial_2" valType="code"/>
      </CodeComponent>
      <CodeComponent name="feedback_main_logic_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="decision_to_work_for_feedback = [];&amp;#10;time_of_press_list = [];&amp;#10;current_work_rate_list = [];&amp;#10;current_opacity_level_list = [];&amp;#10;final_opacity_level = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# initialize empty lists so we can add data&amp;#10;decision_to_work_for_feedback = []&amp;#10;time_of_press_list = []&amp;#10;current_work_rate_list = []&amp;#10;current_opacity_level_list = []&amp;#10;final_opacity_level = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="load_feedback_stim_to_draw = [];&amp;#10;if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;good&quot;)) &amp;&amp; (condition === 1))) {&amp;#10;    decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;    load_feedback_stim_to_draw = vertical_feedback_stim;&amp;#10;} else {&amp;#10;    if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;bad&quot;)) &amp;&amp; (condition === 1))) {&amp;#10;        decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;        load_feedback_stim_to_draw = horizontal_feedback_stim;&amp;#10;    } else {&amp;#10;        if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;good&quot;)) &amp;&amp; (condition === 2))) {&amp;#10;            decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;            load_feedback_stim_to_draw = horizontal_feedback_stim;&amp;#10;        } else {&amp;#10;            if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;bad&quot;)) &amp;&amp; (condition === 2))) {&amp;#10;                decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;                load_feedback_stim_to_draw = vertical_feedback_stim;&amp;#10;            } else {&amp;#10;                if ((outcome === &quot;missed&quot;)) {&amp;#10;                    decision_to_work_for_feedback = &quot;missed_trial&quot;;&amp;#10;                } else {&amp;#10;                    if ((feedback_outcome === &quot;no_feedback&quot;)) {&amp;#10;                        decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;                        load_feedback_stim_to_draw = grey_no_feedback_stim;&amp;#10;                    } else {&amp;#10;                        if ((feedback_outcome === &quot;work_option&quot;)) {&amp;#10;                            decision_to_work_for_feedback = &quot;probe&quot;;&amp;#10;                            load_feedback_stim_to_draw = grey_no_feedback_stim;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;do_not_do_feedback = [];&amp;#10;do_feedback = [];&amp;#10;if ((decision_to_work_for_feedback === &quot;n/a&quot;)) {&amp;#10;    do_not_do_feedback = 1;&amp;#10;    do_feedback = 0;&amp;#10;    draw_miss = 0;&amp;#10;} else {&amp;#10;    if ((decision_to_work_for_feedback === &quot;probe&quot;)) {&amp;#10;        do_not_do_feedback = 0;&amp;#10;        do_feedback = 1;&amp;#10;        draw_miss = 0;&amp;#10;    } else {&amp;#10;        if ((decision_to_work_for_feedback === &quot;missed_trial&quot;)) {&amp;#10;            do_not_do_feedback = 0;&amp;#10;            do_feedback = 0;&amp;#10;            draw_miss = 1;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# initialize feedback stim to draw &amp;#10;load_feedback_stim_to_draw = []&amp;#10;&amp;#10;# draw feedback logic&amp;#10;if feedback_outcome == 'veridical_feedback' and outcome == 'good' and condition == 1:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = vertical_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'bad' and condition == 1:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = horizontal_feedback_stim&amp;#10;    &amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'good' and condition == 2:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = horizontal_feedback_stim&amp;#10;    &amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'bad' and condition == 2:&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = vertical_feedback_stim&amp;#10;&amp;#10;elif outcome == 'missed':&amp;#10;    decision_to_work_for_feedback = 'missed_trial'&amp;#10;&amp;#10;elif feedback_outcome == 'no_feedback':&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    load_feedback_stim_to_draw = grey_no_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'work_option':&amp;#10;    decision_to_work_for_feedback = 'probe'&amp;#10;    load_feedback_stim_to_draw = grey_no_feedback_stim&amp;#10;    &amp;#10;# initalize empty lists to help branch experiment&amp;#10;do_not_do_feedback = []&amp;#10;do_feedback = []&amp;#10;&amp;#10;if decision_to_work_for_feedback == 'n/a':&amp;#10;    do_not_do_feedback = 1&amp;#10;    do_feedback = 0&amp;#10;    draw_miss = 0&amp;#10;    &amp;#10;elif decision_to_work_for_feedback == 'probe':&amp;#10;    do_not_do_feedback = 0&amp;#10;    do_feedback = 1&amp;#10;    draw_miss = 0&amp;#10;    &amp;#10;elif decision_to_work_for_feedback == 'missed_trial':&amp;#10;    do_not_do_feedback = 0&amp;#10;    do_feedback = 0&amp;#10;    draw_miss = 1&amp;#10;&amp;#10;    " valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback_main_logic_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback_main">
      <CodeComponent name="feedback_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="blank_screen_2">
      <TextComponent name="blank_slide_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="blank_slide_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="       " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="initialize_stim_and_key_variables">
      <CodeComponent name="code_JS">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="kb = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true}); &amp;#10;timer = new util.Clock;&amp;#10;win = psychoJS.window;&amp;#10;keys_event = psychoJS.eventManager.getKeys();&amp;#10;random = Math.random;&amp;#10;event = psychoJS.eventManager;&amp;#10;randint = function(min, maxplusone) {&amp;#10;  return Math.floor(Math.random() * (maxplusone - min) ) + min;&amp;#10;}&amp;#10;&amp;#10;condition = randint(1,3);&amp;#10;excel_sheet_choice_practice = randint(1,3);&amp;#10;excel_sheet_choice_main = randint(1,3);&amp;#10;instruction_slide_2_selection = randint(1,3);&amp;#10;select_key_to_press = randint(1,3);&amp;#10;select_feedback_to_press = randint(1,3);&amp;#10;random_feedback_stim = randint(1,3);&amp;#10;post_task_fractal_selection = randint(1,3);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_JS" valType="code"/>
      </CodeComponent>
      <CodeComponent name="initialize_condition_and_stim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# skip subject id&amp;#10;participant = 'n/a'&amp;#10;&amp;#10;# intizalize quiz and attention check count&amp;#10;quiz_and_attention_check_fails&amp;#10;&amp;#10;# initialize custom instructions&amp;#10;&amp;#10;instructions_slide_one = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_01_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;instructions_slide_two = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_02.1_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_two_second = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_02.2_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;instructions_slide_three = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_03_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;instructions_slide_four = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_04_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_five = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_05_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_six = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_06_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_seven = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_07.jpg',&amp;#10;                        size = (1,.75))                        &amp;#10;                        &amp;#10;instructions_slide_8_01 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_08.1_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_8_02 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_08.2_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_8_03 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_08.3_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_09_01 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_09.1_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_09_02 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_09.2_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;instructions_slide_10_01 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_10.1_instructions.png',&amp;#10;                        size = (1.0,.75))&amp;#10;                        &amp;#10;instructions_slide_10_02 = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_10.2_instructions.png',&amp;#10;                        size = (1.0,.75))&amp;#10;                        &amp;#10;instructions_slide_eleven = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_11_instructions.png',&amp;#10;                        size = (1,.75))                        &amp;#10;&amp;#10;instructions_slide_twelve = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_12_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;instructions_slide_thirteen = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_13_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;instructions_slide_fourteen = visual.ImageStim(win=win,&amp;#10;                        image='instructions/Slide_14_instructions.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;max_points = visual.ImageStim(win=win,&amp;#10;                        image='instructions/maximize_points.png',&amp;#10;                        size = (1,.75))    &amp;#10;                        &amp;#10;intro_to_kb = visual.ImageStim(win=win,&amp;#10;                        image='instructions/introduce_keyboard.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;intro_to_kb_old = visual.ImageStim(win=win,&amp;#10;                        image='instructions/introduce_kb.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;# initialize feedback stimuli&amp;#10;horizontal_feedback_stim = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/horizontal_feedback.png',&amp;#10;                        size = (0.15, 0.15))&amp;#10;&amp;#10;vertical_feedback_stim = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/vertical_feedback.png',&amp;#10;                        size = (0.15, 0.15))&amp;#10;&amp;#10;grey_no_feedback_stim = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/noninformative_feedback.png',&amp;#10;                        size = (0.15, 0.15))&amp;#10;                        &amp;#10;# initialize feedback choice stimuli&amp;#10;feedback_choice_screen = visual.ImageStim(win=win,&amp;#10;                        image='feedback_choice/feedback_choice.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;feedback_no_screen = visual.ImageStim(win=win,&amp;#10;                        image='feedback_choice/feedback_no.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;feedback_yes_screen = visual.ImageStim(win=win,&amp;#10;                        image='feedback_choice/feedback_yes.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;# initalize fractals&amp;#10;fractal_blossom = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/fractal_blossom.png',&amp;#10;                        size = (0.15, 0.15))&amp;#10;&amp;#10;fractal_octopus = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/fractal_octopus.png',&amp;#10;                        size = (0.15, 0.15))&amp;#10;&amp;#10;# initialize calibration slides&amp;#10;calibration_slide_1 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide1.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_2 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide2.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_3 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide3.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_4 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide4.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_5 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide5.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_6 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide6.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_7 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide7.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_8 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide8.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_9 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide9.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_10 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide10.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_11 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide11.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_12 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide12.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;calibration_slide_13 = visual.ImageStim(win=win,&amp;#10;                        image='calibration/slide13.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;                        &amp;#10;# initialize post task slides&amp;#10;post_task_completion_slide = visual.ImageStim(win=win,&amp;#10;                        image='post_task/Slide_15.jpg',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;post_task_continue_slide = visual.ImageStim(win=win,&amp;#10;                        image='post_task/Slide_16.jpg',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;post_task_fractal_slide = visual.ImageStim(win=win,&amp;#10;                        image='post_task/Slide_17.jpg',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;post_task_fractal_1_selected_slide = visual.ImageStim(win=win,&amp;#10;                        image='post_task/Slide_18.jpg',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;post_task_fractal_2_selected_slide = visual.ImageStim(win=win,&amp;#10;                        image='post_task/Slide_19.jpg',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;# initialize comprehension check slides&amp;#10;&amp;#10;correct_feedback_reminder = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/correct_feedback_reminder.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;correct_fractal_reminder = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/correct_fractal_reminder.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;correct_result_no_feedback = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/correct_result_no_feedback.png',&amp;#10;                        size = (1,.75))&amp;#10;&amp;#10;correct_result_plus_one = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/correct_result_plus_one.png',&amp;#10;                        size = (1.0,.75))&amp;#10;                        &amp;#10;correct_result_plus_zero = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/correct_result_plus_zero.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;correct_shape = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/correct_shape.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;incorrect_feedback_reminder = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/incorrect_feedback_reminder.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;incorrect_fractal_reminder = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/incorrect_fractal_reminder.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;incorrect_result_no_feedback = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/incorrect_result_no_feedback.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;incorrect_result_plus_one = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/incorrect_result_plus_one.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;incorrect_result_plus_zero = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/incorrect_result_plus_zero.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;incorrect_shape = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/incorrect_shape.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;press_fractal_left = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/press_fractal_left.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;press_fractal_right = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/press_fractal_right.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;press_no_feedback = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/press_no_feedback.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;press_yes_feedback = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/press_yes_feedback.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;result_final_reminder = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/result_final_reminder.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;shapes_question = visual.ImageStim(win=win,&amp;#10;                        image='comprehension_checks/attention_check_shapes.png',&amp;#10;                        size = (1,.75))&amp;#10;                        &amp;#10;# initialize blank screen&amp;#10;blank_screen_image_black = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/blank_screen.png',&amp;#10;                        size = (1,.75))" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="participant = &quot;n/a&quot;;&amp;#10;quiz_and_attention_check_fails;&amp;#10;instructions_slide_one = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_01_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_two = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_02.1_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_two_second = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_02.2_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_three = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_03_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_four = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_04_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_five = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_05_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_six = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_06_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_seven = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_07.jpg&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_8_01 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_08.1_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_8_02 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_08.2_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_8_03 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_08.3_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_09_01 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_09.1_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_09_02 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_09.2_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_10_01 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_10.1_instructions.png&quot;, &quot;size&quot;: [1.0, 0.75]});&amp;#10;instructions_slide_10_02 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_10.2_instructions.png&quot;, &quot;size&quot;: [1.0, 0.75]});&amp;#10;instructions_slide_eleven = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_11_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_twelve = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_12_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_thirteen = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_13_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;instructions_slide_fourteen = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/Slide_14_instructions.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;max_points = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/maximize_points.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;intro_to_kb = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/introduce_keyboard.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;intro_to_kb_old = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;instructions/introduce_kb.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;horizontal_feedback_stim = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/horizontal_feedback.png&quot;, &quot;size&quot;: [0.15, 0.15]});&amp;#10;vertical_feedback_stim = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/vertical_feedback.png&quot;, &quot;size&quot;: [0.15, 0.15]});&amp;#10;grey_no_feedback_stim = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/noninformative_feedback.png&quot;, &quot;size&quot;: [0.15, 0.15]});&amp;#10;feedback_choice_screen = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;feedback_choice/feedback_choice.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;feedback_no_screen = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;feedback_choice/feedback_no.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;feedback_yes_screen = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;feedback_choice/feedback_yes.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;fractal_blossom = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/fractal_blossom.png&quot;, &quot;size&quot;: [0.15, 0.15]});&amp;#10;fractal_octopus = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/fractal_octopus.png&quot;, &quot;size&quot;: [0.15, 0.15]});&amp;#10;calibration_slide_1 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide1.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_2 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide2.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_3 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide3.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_4 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide4.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_5 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide5.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_6 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide6.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_7 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide7.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_8 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide8.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_9 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide9.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_10 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide10.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_11 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide11.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_12 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide12.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_slide_13 = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;calibration/slide13.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;post_task_completion_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;post_task/Slide_15.jpg&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;post_task_continue_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;post_task/Slide_16.jpg&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;post_task_fractal_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;post_task/Slide_17.jpg&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;post_task_fractal_1_selected_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;post_task/Slide_18.jpg&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;post_task_fractal_2_selected_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;post_task/Slide_19.jpg&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;correct_feedback_reminder = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/correct_feedback_reminder.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;correct_fractal_reminder = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/correct_fractal_reminder.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;correct_result_no_feedback = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/correct_result_no_feedback.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;correct_result_plus_one = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/correct_result_plus_one.png&quot;, &quot;size&quot;: [1.0, 0.75]});&amp;#10;correct_result_plus_zero = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/correct_result_plus_zero.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;correct_shape = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/correct_shape.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;incorrect_feedback_reminder = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/incorrect_feedback_reminder.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;incorrect_fractal_reminder = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/incorrect_fractal_reminder.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;incorrect_result_no_feedback = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/incorrect_result_no_feedback.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;incorrect_result_plus_one = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/incorrect_result_plus_one.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;incorrect_result_plus_zero = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/incorrect_result_plus_zero.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;incorrect_shape = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/incorrect_shape.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;press_fractal_left = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/press_fractal_left.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;press_fractal_right = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/press_fractal_right.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;press_no_feedback = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/press_no_feedback.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;press_yes_feedback = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/press_yes_feedback.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;result_final_reminder = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/result_final_reminder.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;shapes_question = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;comprehension_checks/attention_check_shapes.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;blank_screen_image_black = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/blank_screen.png&quot;, &quot;size&quot;: [1, 0.75]});&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="initialize_condition_and_stim" valType="code"/>
      </CodeComponent>
      <CodeComponent name="randomize_conds">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# add data about conditions&amp;#10;psychoJS.experiment.addData('condition', condition)&amp;#10;psychoJS.experiment.addData('excel_sheet_choice_practice', excel_sheet_choice_practice)&amp;#10;psychoJS.experiment.addData('excel_sheet_choice_main', excel_sheet_choice_main)&amp;#10;psychoJS.experiment.addData('instruction_slide_2_selection', instruction_slide_2_selection)&amp;#10;psychoJS.experiment.addData('select_key_to_press', select_key_to_press)&amp;#10;psychoJS.experiment.addData('select_feedback_to_press', select_feedback_to_press)&amp;#10;psychoJS.experiment.addData('random_feedback_stim', random_feedback_stim)&amp;#10;psychoJS.experiment.addData('post_task_fractal_selection', post_task_fractal_selection)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="psychoJS.experiment.addData(&quot;condition&quot;, condition);&amp;#10;psychoJS.experiment.addData(&quot;excel_sheet_choice_practice&quot;, excel_sheet_choice_practice);&amp;#10;psychoJS.experiment.addData(&quot;excel_sheet_choice_main&quot;, excel_sheet_choice_main);&amp;#10;psychoJS.experiment.addData(&quot;instruction_slide_2_selection&quot;, instruction_slide_2_selection);&amp;#10;psychoJS.experiment.addData(&quot;select_key_to_press&quot;, select_key_to_press);&amp;#10;psychoJS.experiment.addData(&quot;select_feedback_to_press&quot;, select_feedback_to_press);&amp;#10;psychoJS.experiment.addData(&quot;random_feedback_stim&quot;, random_feedback_stim);&amp;#10;psychoJS.experiment.addData(&quot;post_task_fractal_selection&quot;, post_task_fractal_selection);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="randomize_conds" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="welcome_slide">
      <ImageComponent name="slide_1_inst">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="instructions/Slide_01_instructions.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="slide_1_inst" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="welcome_slide_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="welcome_slide_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="fractal_selection_quiz">
      <CodeComponent name="display_question_and_outcome">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initialize empty lists&amp;#10;select_key_to_press_slide = []&amp;#10;key_to_press_outcome = [] &amp;#10;&amp;#10;# set stim to draw&amp;#10;if select_key_to_press == 1:&amp;#10;    select_key_to_press_slide = press_fractal_left&amp;#10;elif select_key_to_press == 2:&amp;#10;    select_key_to_press_slide = press_fractal_right&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="select_key_to_press_slide = [];&amp;#10;key_to_press_outcome = [];&amp;#10;if ((select_key_to_press === 1)) {&amp;#10;    select_key_to_press_slide = press_fractal_left;&amp;#10;} else {&amp;#10;    if ((select_key_to_press === 2)) {&amp;#10;        select_key_to_press_slide = press_fractal_right;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="select_key_to_press_slide.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="select_key_to_press_slide.setAutoDraw(True)&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((fractal_selection_quiz_key_resp.keys === &quot;f&quot;) &amp;&amp; (select_key_to_press === 1))) {&amp;#10;    key_to_press_outcome = &quot;correct&quot;;&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;} else {&amp;#10;    if (((fractal_selection_quiz_key_resp.keys === &quot;j&quot;) &amp;&amp; (select_key_to_press === 1))) {&amp;#10;        key_to_press_outcome = &quot;incorrect&quot;;&amp;#10;        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    } else {&amp;#10;        if (((fractal_selection_quiz_key_resp.keys === &quot;f&quot;) &amp;&amp; (select_key_to_press === 2))) {&amp;#10;            key_to_press_outcome = &quot;incorrect&quot;;&amp;#10;            quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;        } else {&amp;#10;            if (((fractal_selection_quiz_key_resp.keys === &quot;j&quot;) &amp;&amp; (select_key_to_press === 2))) {&amp;#10;                key_to_press_outcome = &quot;correct&quot;;&amp;#10;                quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;select_key_to_press_slide.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# get response&amp;#10;if fractal_selection_quiz_key_resp.keys == 'f' and select_key_to_press == 1:   # correct&amp;#10;    key_to_press_outcome = 'correct'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;&amp;#10;elif fractal_selection_quiz_key_resp.keys == 'j' and select_key_to_press == 1: # incorrect&amp;#10;    key_to_press_outcome = 'incorrect'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;&amp;#10;elif fractal_selection_quiz_key_resp.keys == 'f' and select_key_to_press == 2: # incorrect&amp;#10;    key_to_press_outcome = 'incorrect'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;&amp;#10;elif fractal_selection_quiz_key_resp.keys == 'j' and select_key_to_press == 2:  # correct&amp;#10;    key_to_press_outcome = 'correct'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    &amp;#10;select_key_to_press_slide.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="display_question_and_outcome" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="fractal_selection_quiz_key_resp">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="fractal_selection_quiz_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="feedback_selection_quiz">
      <CodeComponent name="show_feedback_slide_and_outcome">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initialize empty lists so we can add outcome&amp;#10;select_feedback_to_press_slide = []&amp;#10;feedback_to_press_outcome = [] &amp;#10;&amp;#10;# set stim to draw&amp;#10;if select_feedback_to_press == 1:&amp;#10;    select_feedback_to_press_slide = press_no_feedback&amp;#10;elif select_feedback_to_press == 2:&amp;#10;    select_feedback_to_press_slide = press_yes_feedback" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="select_feedback_to_press_slide = [];&amp;#10;feedback_to_press_outcome = [];&amp;#10;if ((select_feedback_to_press === 1)) {&amp;#10;    select_feedback_to_press_slide = press_no_feedback;&amp;#10;} else {&amp;#10;    if ((select_feedback_to_press === 2)) {&amp;#10;        select_feedback_to_press_slide = press_yes_feedback;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="select_feedback_to_press_slide.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# test work for feedback knowledge&amp;#10;select_feedback_to_press_slide.setAutoDraw(True)&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((feedback_selection_quiz_key_resp.keys === &quot;o&quot;) &amp;&amp; (select_feedback_to_press === 1))) {&amp;#10;    feedback_to_press_outcome = &quot;correct&quot;;&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;} else {&amp;#10;    if (((feedback_selection_quiz_key_resp.keys === &quot;w&quot;) &amp;&amp; (select_feedback_to_press === 1))) {&amp;#10;        feedback_to_press_outcome = &quot;incorrect&quot;;&amp;#10;        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    } else {&amp;#10;        if (((feedback_selection_quiz_key_resp.keys === &quot;o&quot;) &amp;&amp; (select_feedback_to_press === 2))) {&amp;#10;            feedback_to_press_outcome = &quot;incorrect&quot;;&amp;#10;            quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;        } else {&amp;#10;            if (((feedback_selection_quiz_key_resp.keys === &quot;w&quot;) &amp;&amp; (select_feedback_to_press === 2))) {&amp;#10;                feedback_to_press_outcome = &quot;correct&quot;;&amp;#10;                quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;select_feedback_to_press_slide.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if feedback_selection_quiz_key_resp.keys == 'o' and select_feedback_to_press == 1:   # correct&amp;#10;    feedback_to_press_outcome = 'correct'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;&amp;#10;elif feedback_selection_quiz_key_resp.keys == 'w' and select_feedback_to_press == 1:   # incorrect&amp;#10;    feedback_to_press_outcome = 'incorrect'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;        &amp;#10;elif feedback_selection_quiz_key_resp.keys == 'o' and select_feedback_to_press == 2: # incorrect&amp;#10;    feedback_to_press_outcome = 'incorrect'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;&amp;#10;elif feedback_selection_quiz_key_resp.keys == 'w' and select_feedback_to_press == 2:   # correct&amp;#10;    feedback_to_press_outcome = 'correct'&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;&amp;#10;select_feedback_to_press_slide.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="show_feedback_slide_and_outcome" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="feedback_selection_quiz_key_resp">
        <Param name="allowedKeys" updates="constant" val="'w','o'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="feedback_selection_quiz_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="display_feedback_meanings">
      <CodeComponent name="draw_feedback_meaining_slide">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((condition === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;    vertical_feedback_stim.pos = [(- 0.17), 0.12];&amp;#10;    grey_no_feedback_stim.pos = [0.17, 0.12];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.12];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    instructions_slide_four.setAutoDraw(true);&amp;#10;    horizontal_feedback_stim.setAutoDraw(true);&amp;#10;    vertical_feedback_stim.setAutoDraw(true);&amp;#10;    grey_no_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        horizontal_feedback_stim.pos = [(- 0.17), 0.12];&amp;#10;        vertical_feedback_stim.pos = [0, 0.12];&amp;#10;        grey_no_feedback_stim.pos = [0.17, 0.12];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        instructions_slide_four.setAutoDraw(true);&amp;#10;        horizontal_feedback_stim.setAutoDraw(true);&amp;#10;        vertical_feedback_stim.setAutoDraw(true);&amp;#10;        grey_no_feedback_stim.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# display pairings between feedback stim and outcome meanings&amp;#10;&amp;#10;# in condition 1, the vertical stim means reward&amp;#10;&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.pos = [-.17, 0.12]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.12]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.12)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    instructions_slide_four.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)&amp;#10;&amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [-.17, 0.12]&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.12]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    instructions_slide_four.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((condition === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;    vertical_feedback_stim.pos = [(- 0.17), 0.12];&amp;#10;    grey_no_feedback_stim.pos = [0.17, 0.12];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    instructions_slide_four.setAutoDraw(false);&amp;#10;    horizontal_feedback_stim.setAutoDraw(false);&amp;#10;    vertical_feedback_stim.setAutoDraw(false);&amp;#10;    grey_no_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        horizontal_feedback_stim.pos = [(- 0.17), 0.12];&amp;#10;        vertical_feedback_stim.pos = [0, 0.12];&amp;#10;        grey_no_feedback_stim.pos = [0.17, 0.12];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        instructions_slide_four.setAutoDraw(false);&amp;#10;        horizontal_feedback_stim.setAutoDraw(false);&amp;#10;        vertical_feedback_stim.setAutoDraw(false);&amp;#10;        grey_no_feedback_stim.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# display pairings between feedback stim and outcome meanings&amp;#10;&amp;#10;# in condition 1, the vertical stim means reward&amp;#10;&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.pos = [-.17, 0.12]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.12]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    instructions_slide_four.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)&amp;#10;&amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [-.17, 0.12]&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.12]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    instructions_slide_four.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_feedback_meaining_slide" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="display_feedback_meanings_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="display_feedback_meanings_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="attention_shape_check">
      <CodeComponent name="draw_shape_q">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initialize empty lists so we can add data&amp;#10;shape_quiz_result = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="shape_quiz_result = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="shapes_question.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="shapes_question.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((get_shape_response.keys === &quot;1&quot;)) {&amp;#10;    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    shape_quiz_result = &quot;incorrect&quot;;&amp;#10;} else {&amp;#10;    if ((get_shape_response.keys === &quot;2&quot;)) {&amp;#10;        quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;        shape_quiz_result = &quot;correct&quot;;&amp;#10;    }&amp;#10;}&amp;#10;shapes_question.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# check if correct and update count of fails&amp;#10;if get_shape_response.keys == '1':&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    shape_quiz_result = 'incorrect'&amp;#10;    &amp;#10;elif get_shape_response.keys == '2':&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    shape_quiz_result = 'correct'&amp;#10;    &amp;#10;shapes_question.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_shape_q" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="get_shape_response">
        <Param name="allowedKeys" updates="constant" val="'1','2'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="get_shape_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="advance_to_main_task">
      <CodeComponent name="advance_to_the_main_task">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_fourteen.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_fourteen.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_fourteen.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_fourteen.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="advance_to_the_main_task" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="enter_main_game">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="enter_main_game" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="blank_screen_3">
      <TextComponent name="blank_slide_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="blank_slide_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$isi_times" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="   " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="main_task_2"/>
    <Routine name="blank_screen_4">
      <TextComponent name="blank_slide_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="blank_slide_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="test">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="x = 1;&amp;#10;draw_dat = [];&amp;#10;if ((x === 1)) {&amp;#10;    draw_dat = fractal_blossom;&amp;#10;} else {&amp;#10;    if ((x === 2)) {&amp;#10;        draw_dat = fractal_blossom;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="x = 1 &amp;#10;draw_dat = []&amp;#10;if x == 1:&amp;#10;    draw_dat = fractal_blossom&amp;#10;elif x == 2:&amp;#10;    draw_dat = fractal_blossom" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image_22222">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="$draw_dat" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_22222" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="testing">
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="fractal_octopus = visual.ImageStim(win=win,&amp;#10;                        image='stimuli/fractal_octopus.png',&amp;#10;                        size = (0.15, 0.15))" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="fractal_octopus = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: &quot;stimuli/fractal_octopus.png&quot;, &quot;size&quot;: [0.15, 0.15]});&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="x = true;&amp;#10;while ((x === true)) {&amp;#10;    fractal_octopus.setAutoDraw(true);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="x = True&amp;#10;while x == True:&amp;#10;    fractal_octopus.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="s">
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="fractal_octopus.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="fractal_octopus.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="fractal_octopus.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="fractal_octopus.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_2sss">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2sss" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="begin_instructions">
      <CodeComponent name="begin_task_instructions_now">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((instruction_slide_2_selection === 1)) {&amp;#10;    fractal_blossom.pos = [(- 0.12), 0.13];&amp;#10;    fractal_octopus.pos = [0.12, 0.13];&amp;#10;    instructions_slide_two.setAutoDraw(true);&amp;#10;    fractal_blossom.setAutoDraw(true);&amp;#10;    fractal_octopus.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((instruction_slide_2_selection === 2)) {&amp;#10;        fractal_blossom.pos = [0.12, 0.13];&amp;#10;        fractal_octopus.pos = [(- 0.12), 0.13];&amp;#10;        instructions_slide_two.setAutoDraw(true);&amp;#10;        fractal_blossom.setAutoDraw(true);&amp;#10;        fractal_octopus.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw slide based on condition&amp;#10;if instruction_slide_2_selection == 1:&amp;#10;    &amp;#10;    fractal_blossom.pos = [-.12, .13]&amp;#10;    fractal_octopus.pos = [.12, .13]&amp;#10;    &amp;#10;    instructions_slide_two.setAutoDraw(True)&amp;#10;    fractal_blossom.setAutoDraw(True)&amp;#10;    fractal_octopus.setAutoDraw(True)&amp;#10;&amp;#10;elif instruction_slide_2_selection == 2:&amp;#10;    &amp;#10;    fractal_blossom.pos = [.12, .13]&amp;#10;    fractal_octopus.pos = [-.12, .13]&amp;#10;    &amp;#10;    instructions_slide_two.setAutoDraw(True)&amp;#10;    fractal_blossom.setAutoDraw(True)&amp;#10;    fractal_octopus.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((instruction_slide_2_selection === 1)) {&amp;#10;    fractal_blossom.pos = [(- 0.12), 0.13];&amp;#10;    fractal_octopus.pos = [0.12, 0.13];&amp;#10;    instructions_slide_two.setAutoDraw(false);&amp;#10;    fractal_blossom.setAutoDraw(false);&amp;#10;    fractal_octopus.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((instruction_slide_2_selection === 2)) {&amp;#10;        fractal_blossom.pos = [0.12, 0.13];&amp;#10;        fractal_octopus.pos = [(- 0.12), 0.13];&amp;#10;        instructions_slide_two.setAutoDraw(false);&amp;#10;        fractal_blossom.setAutoDraw(false);&amp;#10;        fractal_octopus.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw slide based on condition&amp;#10;if instruction_slide_2_selection == 1:&amp;#10;    &amp;#10;    fractal_blossom.pos = [-.12, .13]&amp;#10;    fractal_octopus.pos = [.12, .13]&amp;#10;    &amp;#10;    instructions_slide_two.setAutoDraw(False)&amp;#10;    fractal_blossom.setAutoDraw(False)&amp;#10;    fractal_octopus.setAutoDraw(False)&amp;#10;&amp;#10;elif instruction_slide_2_selection == 2:&amp;#10;    &amp;#10;    fractal_blossom.pos = [.12, .13]&amp;#10;    fractal_octopus.pos = [-.12, .13]&amp;#10;    &amp;#10;    instructions_slide_two.setAutoDraw(False)&amp;#10;    fractal_blossom.setAutoDraw(False)&amp;#10;    fractal_octopus.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin_task_instructions_now" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="begin_task_instructions_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="begin_task_instructions_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_begin">
      <CodeComponent name="slide_two">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_two_second.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_two_second.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_two_second.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_two_second.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="slide_two" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_two_key_response">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_two_key_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="fractal_reminder_show">
      <CodeComponent name="reminder">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((key_to_press_outcome === &quot;correct&quot;)) {&amp;#10;    correct_fractal_reminder.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((key_to_press_outcome === &quot;incorrect&quot;)) {&amp;#10;        incorrect_fractal_reminder.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw reminder&amp;#10;if key_to_press_outcome == 'correct':&amp;#10;    correct_fractal_reminder.setAutoDraw(True)&amp;#10;elif key_to_press_outcome == 'incorrect':&amp;#10;    incorrect_fractal_reminder.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((key_to_press_outcome === &quot;correct&quot;)) {&amp;#10;    correct_fractal_reminder.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((key_to_press_outcome === &quot;incorrect&quot;)) {&amp;#10;        incorrect_fractal_reminder.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;key_to_press_outcome&quot;, key_to_press_outcome);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw reminder&amp;#10;if key_to_press_outcome == 'correct':&amp;#10;    correct_fractal_reminder.setAutoDraw(False)&amp;#10;elif key_to_press_outcome == 'incorrect':&amp;#10;    incorrect_fractal_reminder.setAutoDraw(False)&amp;#10;    &amp;#10;# add quiz data&amp;#10;psychoJS.experiment.addData('key_to_press_outcome', key_to_press_outcome)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="reminder" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="fractal_reminder_show_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="fractal_reminder_show_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="draw_slide_3">
      <CodeComponent name="draw_the_third_slide">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_three.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_three.setAutoDraw(True)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_three.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_three.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_the_third_slide" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_3_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_3_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="first_quiz_first_question">
      <CodeComponent name="start_first_quiz">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# initialize empty lists so we can add data&amp;#10;first_stim_quiz_first_question_result = []&amp;#10;first_stim_quiz_second_question_result = []&amp;#10;first_stim_quiz_third_question_result = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="first_stim_quiz_first_question_result = [];&amp;#10;first_stim_quiz_second_question_result = [];&amp;#10;first_stim_quiz_third_question_result = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(true);&amp;#10;horizontal_feedback_stim.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw first part of quiz&amp;#10;horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(True)&amp;#10;horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((first_quiz_first_question_key_resp.keys === &quot;1&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    first_stim_quiz_first_question_result = &quot;incorrect&quot;;&amp;#10;} else {&amp;#10;    if (((first_quiz_first_question_key_resp.keys === &quot;2&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;        first_stim_quiz_first_question_result = &quot;correct&quot;;&amp;#10;    } else {&amp;#10;        if (((first_quiz_first_question_key_resp.keys === &quot;3&quot;) &amp;&amp; (condition === 1))) {&amp;#10;            quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;            first_stim_quiz_first_question_result = &quot;incorrect&quot;;&amp;#10;        } else {&amp;#10;            if (((first_quiz_first_question_key_resp.keys === &quot;1&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;                first_stim_quiz_first_question_result = &quot;correct&quot;;&amp;#10;            } else {&amp;#10;                if (((first_quiz_first_question_key_resp.keys === &quot;2&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                    first_stim_quiz_first_question_result = &quot;incorrect&quot;;&amp;#10;                } else {&amp;#10;                    if (((first_quiz_first_question_key_resp.keys === &quot;3&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                        first_stim_quiz_first_question_result = &quot;incorrect&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(false);&amp;#10;horizontal_feedback_stim.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if first_quiz_first_question_key_resp.keys == '1' and condition == 1:   # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_first_question_result = 'incorrect'&amp;#10;        &amp;#10;elif first_quiz_first_question_key_resp.keys == '2' and condition == 1: # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    first_stim_quiz_first_question_result = 'correct'&amp;#10;        &amp;#10;elif first_quiz_first_question_key_resp.keys == '3' and condition == 1: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_first_question_result = 'incorrect'&amp;#10;    &amp;#10;elif first_quiz_first_question_key_resp.keys == '1' and condition == 2: # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    first_stim_quiz_first_question_result = 'correct'&amp;#10;        &amp;#10;elif first_quiz_first_question_key_resp.keys == '2' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_first_question_result = 'incorrect'&amp;#10;        &amp;#10;elif first_quiz_first_question_key_resp.keys == '3' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_first_question_result = 'incorrect'&amp;#10;&amp;#10;# draw first part of quiz&amp;#10;horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(False)&amp;#10;horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="start_first_quiz" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="first_quiz_first_question_key_resp">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_quiz_first_question_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="first_quiz_first_question_reminder">
      <CodeComponent name="reminder_one">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((first_stim_quiz_first_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_zero.setAutoDraw(true);&amp;#10;    horizontal_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if (((first_stim_quiz_first_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_zero.setAutoDraw(true);&amp;#10;        horizontal_feedback_stim.setAutoDraw(true);&amp;#10;    } else {&amp;#10;        if (((first_stim_quiz_first_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;            horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_one.setAutoDraw(true);&amp;#10;            horizontal_feedback_stim.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            if (((first_stim_quiz_first_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;                horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_one.setAutoDraw(true);&amp;#10;                horizontal_feedback_stim.setAutoDraw(true);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw reminder&amp;#10;if first_stim_quiz_first_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;&amp;#10;elif first_stim_quiz_first_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;&amp;#10;elif first_stim_quiz_first_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;&amp;#10;elif first_stim_quiz_first_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_one.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((first_stim_quiz_first_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_zero.setAutoDraw(false);&amp;#10;    horizontal_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if (((first_stim_quiz_first_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_zero.setAutoDraw(false);&amp;#10;        horizontal_feedback_stim.setAutoDraw(false);&amp;#10;    } else {&amp;#10;        if (((first_stim_quiz_first_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;            horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_one.setAutoDraw(false);&amp;#10;            horizontal_feedback_stim.setAutoDraw(false);&amp;#10;        } else {&amp;#10;            if (((first_stim_quiz_first_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;                horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_one.setAutoDraw(false);&amp;#10;                horizontal_feedback_stim.setAutoDraw(false);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw reminder&amp;#10;if first_stim_quiz_first_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim&amp;#10;&amp;#10;elif first_stim_quiz_first_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim&amp;#10;&amp;#10;elif first_stim_quiz_first_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim&amp;#10;&amp;#10;elif first_stim_quiz_first_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_one.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="reminder_one" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="first_quiz_first_q_reminder_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_quiz_first_q_reminder_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="first_quiz_second_question">
      <CodeComponent name="continue_first_quiz">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(true);&amp;#10;grey_no_feedback_stim.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw second part of quiz&amp;#10;grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(True)&amp;#10;grey_no_feedback_stim.setAutoDraw(True) # draw grey stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((first_quiz_second_question_key_resp.keys === &quot;1&quot;)) {&amp;#10;    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    first_stim_quiz_second_question_result = &quot;incorrect&quot;;&amp;#10;} else {&amp;#10;    if ((first_quiz_second_question_key_resp.keys === &quot;2&quot;)) {&amp;#10;        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;        first_stim_quiz_second_question_result = &quot;incorrect&quot;;&amp;#10;    } else {&amp;#10;        if ((first_quiz_second_question_key_resp.keys === &quot;3&quot;)) {&amp;#10;            quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;            first_stim_quiz_second_question_result = &quot;correct&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(false);&amp;#10;grey_no_feedback_stim.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if first_quiz_second_question_key_resp.keys == '1':   # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_second_question_result = 'incorrect'&amp;#10;        &amp;#10;elif first_quiz_second_question_key_resp.keys == '2': # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_second_question_result = 'incorrect'&amp;#10;        &amp;#10;elif first_quiz_second_question_key_resp.keys == '3': # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    first_stim_quiz_second_question_result = 'correct'&amp;#10;&amp;#10;# draw second part of quiz&amp;#10;grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(False)&amp;#10;grey_no_feedback_stim.setAutoDraw(False) # draw grey stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="continue_first_quiz" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="first_quiz_second_question_key_resp">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_quiz_second_question_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="first_quiz_second_question_reminder">
      <CodeComponent name="reminder_two">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((first_stim_quiz_second_question_result === &quot;correct&quot;)) {&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_no_feedback.setAutoDraw(true);&amp;#10;    grey_no_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((first_stim_quiz_second_question_result === &quot;incorrect&quot;)) {&amp;#10;        grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_no_feedback.setAutoDraw(true);&amp;#10;        grey_no_feedback_stim.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw reminder&amp;#10;if first_stim_quiz_second_question_result == 'correct':&amp;#10;    &amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_no_feedback.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True) # draw grey stim&amp;#10;    &amp;#10;elif first_stim_quiz_second_question_result == 'incorrect':&amp;#10;&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_no_feedback.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True) # draw grey stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((first_stim_quiz_second_question_result === &quot;correct&quot;)) {&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_no_feedback.setAutoDraw(false);&amp;#10;    grey_no_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((first_stim_quiz_second_question_result === &quot;incorrect&quot;)) {&amp;#10;        grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_no_feedback.setAutoDraw(false);&amp;#10;        grey_no_feedback_stim.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw reminder&amp;#10;if first_stim_quiz_second_question_result == 'correct':&amp;#10;    &amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_no_feedback.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False) # draw grey stim&amp;#10;    &amp;#10;elif first_stim_quiz_second_question_result == 'incorrect':&amp;#10;&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_no_feedback.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False) # draw grey stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="reminder_two" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="first_quiz_second_question_reminder_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_quiz_second_question_reminder_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="first_quiz_third_question">
      <KeyboardComponent name="last_q_first_quiz_key_resp">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="last_q_first_quiz_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="last_q_first_quiz">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="vertical_feedback_stim.pos = [0, 0.12];&amp;#10;vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(true);&amp;#10;vertical_feedback_stim.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw third part of quiz&amp;#10;vertical_feedback_stim.pos = [0, 0.12]&amp;#10;vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(True)&amp;#10;vertical_feedback_stim.setAutoDraw(True) # draw vertical stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((last_q_first_quiz_key_resp.keys === &quot;1&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;    first_stim_quiz_third_question_result = &quot;correct&quot;;&amp;#10;} else {&amp;#10;    if (((last_q_first_quiz_key_resp.keys === &quot;2&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;        first_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;    } else {&amp;#10;        if (((last_q_first_quiz_key_resp.keys === &quot;3&quot;) &amp;&amp; (condition === 1))) {&amp;#10;            quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;            first_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;        } else {&amp;#10;            if (((last_q_first_quiz_key_resp.keys === &quot;1&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                first_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;            } else {&amp;#10;                if (((last_q_first_quiz_key_resp.keys === &quot;2&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                    quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;                    first_stim_quiz_third_question_result = &quot;correct&quot;;&amp;#10;                } else {&amp;#10;                    if (((last_q_first_quiz_key_resp.keys === &quot;3&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                        first_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;vertical_feedback_stim.pos = [0, 0.12];&amp;#10;vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(false);&amp;#10;vertical_feedback_stim.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if last_q_first_quiz_key_resp.keys == '1' and condition == 1:   # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    first_stim_quiz_third_question_result = 'correct'&amp;#10;        &amp;#10;elif last_q_first_quiz_key_resp.keys == '2' and condition == 1: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_third_question_result = 'incorrect'&amp;#10;        &amp;#10;elif last_q_first_quiz_key_resp.keys == '3' and condition == 1: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_third_question_result = 'incorrect'&amp;#10;    &amp;#10;elif last_q_first_quiz_key_resp.keys == '1' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_third_question_result = 'incorrect'&amp;#10;        &amp;#10;elif last_q_first_quiz_key_resp.keys == '2' and condition == 2: # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    first_stim_quiz_third_question_result = 'correct'&amp;#10;        &amp;#10;elif last_q_first_quiz_key_resp.keys == '3' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    first_stim_quiz_third_question_result = 'incorrect'&amp;#10;&amp;#10;# draw third part of quiz&amp;#10;vertical_feedback_stim.pos = [0, 0.12]&amp;#10;vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(False)&amp;#10;vertical_feedback_stim.setAutoDraw(False) # draw vertical stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="last_q_first_quiz" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="first_quiz_third_question_reminder">
      <KeyboardComponent name="first_quiz_third_question_reminder_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_quiz_third_question_reminder_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="reminder_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((first_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    vertical_feedback_stim.pos = [0, 0.12];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_one.setAutoDraw(true);&amp;#10;    vertical_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if (((first_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        vertical_feedback_stim.pos = [0, 0.12];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_one.setAutoDraw(true);&amp;#10;        vertical_feedback_stim.setAutoDraw(true);&amp;#10;    } else {&amp;#10;        if (((first_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            vertical_feedback_stim.pos = [0, 0.12];&amp;#10;            vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_zero.setAutoDraw(true);&amp;#10;            vertical_feedback_stim.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            if (((first_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                vertical_feedback_stim.pos = [0, 0.12];&amp;#10;                vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_zero.setAutoDraw(true);&amp;#10;                vertical_feedback_stim.setAutoDraw(true);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw reminder&amp;#10;if first_stim_quiz_third_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim&amp;#10;&amp;#10;elif first_stim_quiz_third_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    incorrect_result_plus_one.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim&amp;#10;&amp;#10;elif first_stim_quiz_third_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim&amp;#10;&amp;#10;elif first_stim_quiz_third_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((first_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    vertical_feedback_stim.pos = [0, 0.12];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_one.setAutoDraw(false);&amp;#10;    vertical_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if (((first_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        vertical_feedback_stim.pos = [0, 0.12];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_one.setAutoDraw(false);&amp;#10;        vertical_feedback_stim.setAutoDraw(false);&amp;#10;    } else {&amp;#10;        if (((first_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            vertical_feedback_stim.pos = [0, 0.12];&amp;#10;            vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_zero.setAutoDraw(false);&amp;#10;            vertical_feedback_stim.setAutoDraw(false);&amp;#10;        } else {&amp;#10;            if (((first_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                vertical_feedback_stim.pos = [0, 0.12];&amp;#10;                vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_zero.setAutoDraw(false);&amp;#10;                vertical_feedback_stim.setAutoDraw(false);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw reminder&amp;#10;if first_stim_quiz_third_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim&amp;#10;&amp;#10;elif first_stim_quiz_third_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    incorrect_result_plus_one.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim&amp;#10;&amp;#10;elif first_stim_quiz_third_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim&amp;#10;&amp;#10;elif first_stim_quiz_third_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="reminder_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="total_reminder_one">
      <KeyboardComponent name="first_reminder_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_reminder_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="first_reminder">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((condition === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.17];&amp;#10;    vertical_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;    grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    result_final_reminder.setAutoDraw(true);&amp;#10;    horizontal_feedback_stim.setAutoDraw(true);&amp;#10;    vertical_feedback_stim.setAutoDraw(true);&amp;#10;    grey_no_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        horizontal_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;        vertical_feedback_stim.pos = [0, 0.17];&amp;#10;        grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        result_final_reminder.setAutoDraw(true);&amp;#10;        horizontal_feedback_stim.setAutoDraw(true);&amp;#10;        vertical_feedback_stim.setAutoDraw(true);&amp;#10;        grey_no_feedback_stim.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw reminder&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.17]&amp;#10;    vertical_feedback_stim.pos = [-.17, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)&amp;#10;&amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [-.17, 0.17]&amp;#10;    vertical_feedback_stim.pos = [0, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((condition === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.17];&amp;#10;    vertical_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;    grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    result_final_reminder.setAutoDraw(false);&amp;#10;    horizontal_feedback_stim.setAutoDraw(false);&amp;#10;    vertical_feedback_stim.setAutoDraw(false);&amp;#10;    grey_no_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        horizontal_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;        vertical_feedback_stim.pos = [0, 0.17];&amp;#10;        grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        result_final_reminder.setAutoDraw(false);&amp;#10;        horizontal_feedback_stim.setAutoDraw(false);&amp;#10;        vertical_feedback_stim.setAutoDraw(false);&amp;#10;        grey_no_feedback_stim.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;first_stim_quiz_first_question_result&quot;, first_stim_quiz_first_question_result);&amp;#10;psychoJS.experiment.addData(&quot;first_stim_quiz_second_question_result&quot;, first_stim_quiz_second_question_result);&amp;#10;psychoJS.experiment.addData(&quot;first_stim_quiz_third_question_result&quot;, first_stim_quiz_third_question_result);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw reminder&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.17]&amp;#10;    vertical_feedback_stim.pos = [-.17, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)&amp;#10;&amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [-.17, 0.17]&amp;#10;    vertical_feedback_stim.pos = [0, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)&amp;#10;&amp;#10;# add quiz data&amp;#10;psychoJS.experiment.addData('first_stim_quiz_first_question_result', first_stim_quiz_first_question_result)&amp;#10;psychoJS.experiment.addData('first_stim_quiz_second_question_result', first_stim_quiz_second_question_result)&amp;#10;psychoJS.experiment.addData('first_stim_quiz_third_question_result', first_stim_quiz_third_question_result)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="first_reminder" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="continue_instructions_7">
      <CodeComponent name="draw_slide_7">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_seven.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_seven.setAutoDraw(True)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_seven.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_seven.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_slide_7" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_14">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_14" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="feedback_post_quiz_reminder">
      <CodeComponent name="reminder_about_feedback">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((feedback_to_press_outcome === &quot;correct&quot;)) {&amp;#10;    correct_feedback_reminder.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((feedback_to_press_outcome === &quot;incorrect&quot;)) {&amp;#10;        incorrect_feedback_reminder.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw reminder&amp;#10;if feedback_to_press_outcome == 'correct':&amp;#10;    correct_feedback_reminder.setAutoDraw(True)&amp;#10;elif feedback_to_press_outcome == 'incorrect':&amp;#10;    incorrect_feedback_reminder.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((feedback_to_press_outcome === &quot;correct&quot;)) {&amp;#10;    correct_feedback_reminder.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((feedback_to_press_outcome === &quot;incorrect&quot;)) {&amp;#10;        incorrect_feedback_reminder.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;feedback_selection_quiz_result&quot;, feedback_to_press_outcome);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw reminder&amp;#10;if feedback_to_press_outcome == 'correct':&amp;#10;    correct_feedback_reminder.setAutoDraw(False)&amp;#10;elif feedback_to_press_outcome == 'incorrect':&amp;#10;    incorrect_feedback_reminder.setAutoDraw(False)&amp;#10;&amp;#10;# add data&amp;#10;psychoJS.experiment.addData('feedback_selection_quiz_result', feedback_to_press_outcome)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="reminder_about_feedback" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="feedback_post_quiz_reminder_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="feedback_post_quiz_reminder_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_instructions_10">
      <CodeComponent name="draw_10_slide">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_ten.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_ten.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_ten.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_ten.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_10_slide" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_10_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_10_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_instructions_even_further_11">
      <CodeComponent name="continue_even_further">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_eleven.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_eleven.setAutoDraw(True)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_eleven.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_eleven.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="continue_even_further" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_11_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_11_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="attention_reminder">
      <KeyboardComponent name="attention_reminder_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="attention_reminder_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="reminder_about_attention">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((shape_quiz_result === &quot;correct&quot;)) {&amp;#10;    correct_shape.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((shape_quiz_result === &quot;incorrect&quot;)) {&amp;#10;        incorrect_shape.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if shape_quiz_result == 'correct':&amp;#10;    correct_shape.setAutoDraw(True)&amp;#10;&amp;#10;elif shape_quiz_result == 'incorrect':&amp;#10;    incorrect_shape.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((shape_quiz_result === &quot;correct&quot;)) {&amp;#10;    correct_shape.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((shape_quiz_result === &quot;incorrect&quot;)) {&amp;#10;        incorrect_shape.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;shape_quiz_result&quot;, shape_quiz_result);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if shape_quiz_result == 'correct':&amp;#10;    correct_shape.setAutoDraw(False)&amp;#10;&amp;#10;elif shape_quiz_result == 'incorrect':&amp;#10;    incorrect_shape.setAutoDraw(False)&amp;#10;&amp;#10;# add data&amp;#10;psychoJS.experiment.addData('shape_quiz_result', shape_quiz_result)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="reminder_about_attention" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="completed_main_task">
      <ImageComponent name="post_task_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="post_task/Slide_15.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="post_task_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="continue_to_fractal_question">
      <CodeComponent name="continue_to_the_fractal_question">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="post_task_continue_slide.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="post_task_continue_slide.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="post_task_continue_slide.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="post_task_continue_slide.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="continue_to_the_fractal_question" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="go_to_fractal_question">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="go_to_fractal_question" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="calib_one">
      <CodeComponent name="draw_calib_one">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="calibration_slide_1.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="calibration_slide_1.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="calibration_slide_1.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="calibration_slide_1.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_calib_one" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="calib_one_space">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="calib_one_space" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="calib_two">
      <CodeComponent name="draw_calib_two">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="calibration_slide_2.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="calibration_slide_2.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="calibration_slide_2.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="calibration_slide_2.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_calib_two" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="calib_two_space">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="calib_two_space" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="start_calib">
      <KeyboardComponent name="calib_work_space">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="calib_work_space" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="go_calib">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="calibration_time = 3;&amp;#10;number_of_upates = 12;&amp;#10;calibration_update_duration = 0.25;&amp;#10;calibration_total_presses = 0;&amp;#10;slide_number = 2;&amp;#10;current_time = [];&amp;#10;show_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: ((&quot;calibration/Slide&quot; + slide_number.toString()) + &quot;.jpeg&quot;), &quot;size&quot;: 1.0});&amp;#10;show_slide.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# set calibration parameters&amp;#10;calibration_time = 3&amp;#10;number_of_upates = 12&amp;#10;calibration_update_duration = .25&amp;#10;calibration_total_presses = 0 &amp;#10;slide_number = 2&amp;#10;current_time = []&amp;#10;show_slide = visual.ImageStim(win=win,&amp;#10;                            image='calibration/Slide' + str(slide_number) + '.jpeg',&amp;#10;                            size = 1.0)&amp;#10;show_slide.setAutoDraw(True)&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        #if current_time &gt; calibration_update_duration:&amp;#10;            #slide_number = slide_number + 1&amp;#10;            #show_slide.setAutoDraw(True)&amp;#10;            #calibration_update_duration = calibration_update_duration + 0.25&amp;#10;            &amp;#10;            #psychoJS.window.callOnFlip()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if calib_work_space.keys == 'space':&amp;#10;    calibration_total_presses = calibration_total_presses + 1&amp;#10;    slide_number = slide_number + 1&amp;#10;    show_slide = visual.ImageStim(win=win,&amp;#10;                            image='calibration/Slide' + str(slide_number) + '.jpeg',&amp;#10;                            size = 1.0)&amp;#10;                            &amp;#10;show_slide.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((calib_work_space.keys === &quot;space&quot;)) {&amp;#10;    calibration_total_presses = (calibration_total_presses + 1);&amp;#10;    slide_number = (slide_number + 1);&amp;#10;    show_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: ((&quot;calibration/Slide&quot; + slide_number.toString()) + &quot;.jpeg&quot;), &quot;size&quot;: 1.0});&amp;#10;}&amp;#10;show_slide.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="maximum_work_for_feedback_threshold = (calibration_total_presses / calibration_time);&amp;#10;work_for_feedback_threshold_multiplier = 0.9;&amp;#10;final_work_for_feedback_threshold = (work_for_feedback_threshold_multiplier * maximum_work_for_feedback_threshold);&amp;#10;show_slide.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="maximum_work_for_feedback_threshold = calibration_total_presses / calibration_time&amp;#10;work_for_feedback_threshold_multiplier = .9&amp;#10;final_work_for_feedback_threshold = work_for_feedback_threshold_multiplier * maximum_work_for_feedback_threshold&amp;#10;show_slide.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="go_calib" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="advance_to_practice_session">
      <KeyboardComponent name="enter_to_practice_session">
        <Param name="allowedKeys" updates="constant" val="'return'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="enter_to_practice_session" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="draw_return_practice_slide">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_twelve.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_return_practice_slide" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="second_quiz_first_question">
      <CodeComponent name="first_q_quiz_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(true);&amp;#10;grey_no_feedback_stim.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(True)&amp;#10;grey_no_feedback_stim.setAutoDraw(True) # draw grey stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((first_q_second_quiz_resp.keys === &quot;1&quot;)) {&amp;#10;    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    second_stim_quiz_first_question_result = &quot;incorrect&quot;;&amp;#10;} else {&amp;#10;    if ((first_q_second_quiz_resp.keys === &quot;2&quot;)) {&amp;#10;        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;        second_stim_quiz_first_question_result = &quot;incorrect&quot;;&amp;#10;    } else {&amp;#10;        if ((first_q_second_quiz_resp.keys === &quot;3&quot;)) {&amp;#10;            quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;            second_stim_quiz_first_question_result = &quot;correct&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(false);&amp;#10;grey_no_feedback_stim.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if first_q_second_quiz_resp.keys == '1':   # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_first_question_result = 'incorrect'&amp;#10;        &amp;#10;elif first_q_second_quiz_resp.keys == '2': # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_first_question_result = 'incorrect'&amp;#10;        &amp;#10;elif first_q_second_quiz_resp.keys == '3': # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    second_stim_quiz_first_question_result = 'correct'&amp;#10;&amp;#10;grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(False)&amp;#10;grey_no_feedback_stim.setAutoDraw(False) # draw grey stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="first_q_quiz_2" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="first_q_second_quiz_resp">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="first_q_second_quiz_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="second_quiz_first_question_reminder">
      <CodeComponent name="first_q_second_quiz_reminder">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((second_stim_quiz_first_question_result === &quot;correct&quot;)) {&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_no_feedback.setAutoDraw(true);&amp;#10;    grey_no_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((second_stim_quiz_first_question_result === &quot;incorrect&quot;)) {&amp;#10;        grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_no_feedback.setAutoDraw(true);&amp;#10;        grey_no_feedback_stim.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if second_stim_quiz_first_question_result == 'correct':&amp;#10;    &amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_no_feedback.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True) # draw grey stim&amp;#10;    &amp;#10;elif second_stim_quiz_first_question_result == 'incorrect':&amp;#10;&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_no_feedback.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True) # draw grey stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((second_stim_quiz_first_question_result === &quot;correct&quot;)) {&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_no_feedback.setAutoDraw(false);&amp;#10;    grey_no_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((second_stim_quiz_first_question_result === &quot;incorrect&quot;)) {&amp;#10;        grey_no_feedback_stim.pos = [0, 0.12];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_no_feedback.setAutoDraw(false);&amp;#10;        grey_no_feedback_stim.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if second_stim_quiz_first_question_result == 'correct':&amp;#10;    &amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_no_feedback.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False) # draw grey stim&amp;#10;    &amp;#10;elif second_stim_quiz_first_question_result == 'incorrect':&amp;#10;&amp;#10;    grey_no_feedback_stim.pos = [0, 0.12]&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_no_feedback.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False) # draw grey stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="first_q_second_quiz_reminder" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="advance_q_2_quiz_2">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="advance_q_2_quiz_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="second_quiz_second_question">
      <CodeComponent name="second_q_second_quiz">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="vertical_feedback_stim.pos = [0, 0.12];&amp;#10;vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(true);&amp;#10;vertical_feedback_stim.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="vertical_feedback_stim.pos = [0, 0.12]&amp;#10;vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(True)&amp;#10;vertical_feedback_stim.setAutoDraw(True) # draw vertical stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((resp_q_2_q_2.keys === &quot;1&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;    second_stim_quiz_second_question_result = &quot;correct&quot;;&amp;#10;} else {&amp;#10;    if (((resp_q_2_q_2.keys === &quot;2&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;        second_stim_quiz_second_question_result = &quot;incorrect&quot;;&amp;#10;    } else {&amp;#10;        if (((resp_q_2_q_2.keys === &quot;3&quot;) &amp;&amp; (condition === 1))) {&amp;#10;            quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;            second_stim_quiz_second_question_result = &quot;incorrect&quot;;&amp;#10;        } else {&amp;#10;            if (((resp_q_2_q_2.keys === &quot;1&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                second_stim_quiz_second_question_result = &quot;incorrect&quot;;&amp;#10;            } else {&amp;#10;                if (((resp_q_2_q_2.keys === &quot;2&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                    quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;                    second_stim_quiz_second_question_result = &quot;correct&quot;;&amp;#10;                } else {&amp;#10;                    if (((resp_q_2_q_2.keys === &quot;3&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                        second_stim_quiz_second_question_result = &quot;incorrect&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;vertical_feedback_stim.pos = [0, 0.12];&amp;#10;vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(false);&amp;#10;vertical_feedback_stim.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if resp_q_2_q_2.keys == '1' and condition == 1:   # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    second_stim_quiz_second_question_result = 'correct'&amp;#10;        &amp;#10;elif resp_q_2_q_2.keys == '2' and condition == 1: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_second_question_result = 'incorrect'&amp;#10;        &amp;#10;elif resp_q_2_q_2.keys == '3' and condition == 1: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_second_question_result = 'incorrect'&amp;#10;    &amp;#10;elif resp_q_2_q_2.keys == '1' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_second_question_result = 'incorrect'&amp;#10;        &amp;#10;elif resp_q_2_q_2.keys == '2' and condition == 2: # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    second_stim_quiz_second_question_result = 'correct'&amp;#10;        &amp;#10;elif resp_q_2_q_2.keys == '3' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_second_question_result = 'incorrect'&amp;#10;&amp;#10;vertical_feedback_stim.pos = [0, 0.12]&amp;#10;vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(False)&amp;#10;vertical_feedback_stim.setAutoDraw(False) # draw vertical stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="second_q_second_quiz" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="resp_q_2_q_2">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="resp_q_2_q_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="second_quiz_second_question_reminder">
      <CodeComponent name="draw_q_2_q_2_reminder">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((second_stim_quiz_second_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    vertical_feedback_stim.pos = [0, 0.12];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_one.setAutoDraw(true);&amp;#10;    vertical_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if (((second_stim_quiz_second_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        vertical_feedback_stim.pos = [0, 0.12];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_one.setAutoDraw(true);&amp;#10;        vertical_feedback_stim.setAutoDraw(true);&amp;#10;    } else {&amp;#10;        if (((second_stim_quiz_second_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            vertical_feedback_stim.pos = [0, 0.12];&amp;#10;            vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_zero.setAutoDraw(true);&amp;#10;            vertical_feedback_stim.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            if (((second_stim_quiz_second_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                vertical_feedback_stim.pos = [0, 0.12];&amp;#10;                vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_zero.setAutoDraw(true);&amp;#10;                vertical_feedback_stim.setAutoDraw(true);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if second_stim_quiz_second_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim&amp;#10;    &amp;#10;elif second_stim_quiz_second_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    incorrect_result_plus_one.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim&amp;#10;&amp;#10;elif second_stim_quiz_second_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim&amp;#10;&amp;#10;elif second_stim_quiz_second_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True) # draw vertical stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((second_stim_quiz_second_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    vertical_feedback_stim.pos = [0, 0.12];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_one.setAutoDraw(false);&amp;#10;    vertical_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if (((second_stim_quiz_second_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        vertical_feedback_stim.pos = [0, 0.12];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_one.setAutoDraw(false);&amp;#10;        vertical_feedback_stim.setAutoDraw(false);&amp;#10;    } else {&amp;#10;        if (((second_stim_quiz_second_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            vertical_feedback_stim.pos = [0, 0.12];&amp;#10;            vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_zero.setAutoDraw(false);&amp;#10;            vertical_feedback_stim.setAutoDraw(false);&amp;#10;        } else {&amp;#10;            if (((second_stim_quiz_second_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                vertical_feedback_stim.pos = [0, 0.12];&amp;#10;                vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_zero.setAutoDraw(false);&amp;#10;                vertical_feedback_stim.setAutoDraw(false);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if second_stim_quiz_second_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim&amp;#10;    &amp;#10;elif second_stim_quiz_second_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    incorrect_result_plus_one.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim&amp;#10;&amp;#10;elif second_stim_quiz_second_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim&amp;#10;&amp;#10;elif second_stim_quiz_second_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    vertical_feedback_stim.pos = [0, 0.12]&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False) # draw vertical stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_q_2_q_2_reminder" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="advance_q_3_quiz_2">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="advance_q_3_quiz_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="second_quiz_third_question">
      <CodeComponent name="third_q_quiz_two_draw">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(true);&amp;#10;horizontal_feedback_stim.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(True)&amp;#10;horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((resp_quiz_2_q_3.keys === &quot;1&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;    second_stim_quiz_third_question_resultt = &quot;incorrect&quot;;&amp;#10;} else {&amp;#10;    if (((resp_quiz_2_q_3.keys === &quot;2&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;        second_stim_quiz_third_question_result = &quot;correct&quot;;&amp;#10;    } else {&amp;#10;        if (((resp_quiz_2_q_3.keys === &quot;3&quot;) &amp;&amp; (condition === 1))) {&amp;#10;            quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;            second_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;        } else {&amp;#10;            if (((resp_quiz_2_q_3.keys === &quot;1&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                quiz_and_attention_check_fails = quiz_and_attention_check_fails;&amp;#10;                second_stim_quiz_third_question_result = &quot;correct&quot;;&amp;#10;            } else {&amp;#10;                if (((resp_quiz_2_q_3.keys === &quot;2&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                    quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                    second_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;                } else {&amp;#10;                    if (((resp_quiz_2_q_3.keys === &quot;3&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                        quiz_and_attention_check_fails = (quiz_and_attention_check_fails + 1);&amp;#10;                        second_stim_quiz_third_question_result = &quot;incorrect&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;instructions_slide_six.setAutoDraw(false);&amp;#10;horizontal_feedback_stim.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if resp_quiz_2_q_3.keys == '1' and condition == 1:   # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_third_question_resultt = 'incorrect'&amp;#10;        &amp;#10;elif resp_quiz_2_q_3.keys == '2' and condition == 1: # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    second_stim_quiz_third_question_result = 'correct'&amp;#10;        &amp;#10;elif resp_quiz_2_q_3.keys == '3' and condition == 1: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_third_question_result = 'incorrect'&amp;#10;    &amp;#10;elif resp_quiz_2_q_3.keys == '1' and condition == 2: # correct&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails&amp;#10;    second_stim_quiz_third_question_result = 'correct'&amp;#10;        &amp;#10;elif resp_quiz_2_q_3.keys == '2' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_third_question_result = 'incorrect'&amp;#10;        &amp;#10;elif resp_quiz_2_q_3.keys == '3' and condition == 2: # incorrect&amp;#10;    quiz_and_attention_check_fails = quiz_and_attention_check_fails + 1&amp;#10;    second_stim_quiz_third_question_result = 'incorrect'&amp;#10;    &amp;#10;horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;instructions_slide_six.setAutoDraw(False)&amp;#10;horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="third_q_quiz_two_draw" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="resp_quiz_2_q_3">
        <Param name="allowedKeys" updates="constant" val="'1','2','3'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="resp_quiz_2_q_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="second_quiz_third_question_reminder">
      <CodeComponent name="draw_reminder_for_quiz_2_q_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((second_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_zero.setAutoDraw(true);&amp;#10;    horizontal_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if (((second_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_zero.setAutoDraw(true);&amp;#10;        horizontal_feedback_stim.setAutoDraw(true);&amp;#10;    } else {&amp;#10;        if (((second_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;            horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_one.setAutoDraw(true);&amp;#10;            horizontal_feedback_stim.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            if (((second_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;                horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_one.setAutoDraw(true);&amp;#10;                horizontal_feedback_stim.setAutoDraw(true);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#reminder&amp;#10;if second_stim_quiz_third_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;    &amp;#10;elif second_stim_quiz_third_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;&amp;#10;elif second_stim_quiz_third_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim&amp;#10;&amp;#10;elif second_stim_quiz_third_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_one.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True) # draw horizontal stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((second_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 1))) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    correct_result_plus_zero.setAutoDraw(false);&amp;#10;    horizontal_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if (((second_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 1))) {&amp;#10;        horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        incorrect_result_plus_zero.setAutoDraw(false);&amp;#10;        horizontal_feedback_stim.setAutoDraw(false);&amp;#10;    } else {&amp;#10;        if (((second_stim_quiz_third_question_result === &quot;correct&quot;) &amp;&amp; (condition === 2))) {&amp;#10;            horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;            horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;            correct_result_plus_one.setAutoDraw(false);&amp;#10;            horizontal_feedback_stim.setAutoDraw(false);&amp;#10;        } else {&amp;#10;            if (((second_stim_quiz_third_question_result === &quot;incorrect&quot;) &amp;&amp; (condition === 2))) {&amp;#10;                horizontal_feedback_stim.pos = [0, 0.12];&amp;#10;                horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;                incorrect_result_plus_one.setAutoDraw(false);&amp;#10;                horizontal_feedback_stim.setAutoDraw(false);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#reminder&amp;#10;if second_stim_quiz_third_question_result == 'correct' and condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_zero.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim&amp;#10;    &amp;#10;elif second_stim_quiz_third_question_result == 'incorrect' and condition == 1:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_zero.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim&amp;#10;&amp;#10;elif second_stim_quiz_third_question_result == 'correct' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    correct_result_plus_one.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim&amp;#10;&amp;#10;elif second_stim_quiz_third_question_result == 'incorrect' and condition == 2:&amp;#10;&amp;#10;    horizontal_feedback_stim.pos = [0, 0.12]&amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;&amp;#10;    incorrect_result_plus_one.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False) # draw horizontal stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_reminder_for_quiz_2_q_3" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="advance_from_second_quiz">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="advance_from_second_quiz" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="last_stim_reminder">
      <KeyboardComponent name="advance_from_last_reminder">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="advance_from_last_reminder" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="draw_the_last_reminder">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((condition === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.17];&amp;#10;    vertical_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;    grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    result_final_reminder.setAutoDraw(true);&amp;#10;    horizontal_feedback_stim.setAutoDraw(true);&amp;#10;    vertical_feedback_stim.setAutoDraw(true);&amp;#10;    grey_no_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        horizontal_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;        vertical_feedback_stim.pos = [0, 0.17];&amp;#10;        grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        result_final_reminder.setAutoDraw(true);&amp;#10;        horizontal_feedback_stim.setAutoDraw(true);&amp;#10;        vertical_feedback_stim.setAutoDraw(true);&amp;#10;        grey_no_feedback_stim.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# draw another reminder&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.17]&amp;#10;    vertical_feedback_stim.pos = [-.17, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)&amp;#10;&amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [-.17, 0.17]&amp;#10;    vertical_feedback_stim.pos = [0, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((condition === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0.17];&amp;#10;    vertical_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;    grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;    horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;    vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;    grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;    result_final_reminder.setAutoDraw(false);&amp;#10;    horizontal_feedback_stim.setAutoDraw(false);&amp;#10;    vertical_feedback_stim.setAutoDraw(false);&amp;#10;    grey_no_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        horizontal_feedback_stim.pos = [(- 0.17), 0.17];&amp;#10;        vertical_feedback_stim.pos = [0, 0.17];&amp;#10;        grey_no_feedback_stim.pos = [0.17, 0.17];&amp;#10;        horizontal_feedback_stim.size = [0.1, 0.1];&amp;#10;        vertical_feedback_stim.size = [0.1, 0.1];&amp;#10;        grey_no_feedback_stim.size = [0.1, 0.1];&amp;#10;        result_final_reminder.setAutoDraw(false);&amp;#10;        horizontal_feedback_stim.setAutoDraw(false);&amp;#10;        vertical_feedback_stim.setAutoDraw(false);&amp;#10;        grey_no_feedback_stim.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;second_stim_quiz_first_question_result&quot;, second_stim_quiz_first_question_result);&amp;#10;psychoJS.experiment.addData(&quot;second_stim_quiz_second_question_result&quot;, second_stim_quiz_second_question_result);&amp;#10;psychoJS.experiment.addData(&quot;second_stim_quiz_third_question_result&quot;, second_stim_quiz_third_question_result);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# draw another reminder&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [0, 0.17]&amp;#10;    vertical_feedback_stim.pos = [-.17, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)&amp;#10;&amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = [-.17, 0.17]&amp;#10;    vertical_feedback_stim.pos = [0, 0.17]&amp;#10;    grey_no_feedback_stim.pos = [.17, 0.17]&amp;#10;    &amp;#10;    horizontal_feedback_stim.size = (0.10, 0.10)&amp;#10;    vertical_feedback_stim.size = (0.10, 0.10)&amp;#10;    grey_no_feedback_stim.size = (0.10, 0.10)&amp;#10;    &amp;#10;    result_final_reminder.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)&amp;#10;&amp;#10;# add data&amp;#10;psychoJS.experiment.addData('second_stim_quiz_first_question_result', second_stim_quiz_first_question_result)&amp;#10;psychoJS.experiment.addData('second_stim_quiz_second_question_result', second_stim_quiz_second_question_result)&amp;#10;psychoJS.experiment.addData('second_stim_quiz_third_question_result', second_stim_quiz_third_question_result)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_the_last_reminder" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback_practice_start"/>
    <Routine name="start_new_routine_js">
      <CodeComponent name="start_feedback_custom">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="decision_to_work_for_feedback = [];&amp;#10;decision_to_work_for_feedback_rt = [];&amp;#10;time_of_press_list = [];&amp;#10;current_work_rate_list = [];&amp;#10;current_opacity_level_list = [];&amp;#10;final_opacity = [];&amp;#10;feedback_stim_draw = [];&amp;#10;feedback_option = [];&amp;#10;if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;good&quot;)) &amp;&amp; (condition === 1))) {&amp;#10;    feedback_option = &quot;no&quot;;&amp;#10;    decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;    feedback_stim_draw = vertical_feedback_stim;&amp;#10;} else {&amp;#10;    if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;bad&quot;)) &amp;&amp; (condition === 1))) {&amp;#10;        feedback_option = &quot;no&quot;;&amp;#10;        decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;        feedback_stim_draw = horizontal_feedback_stim;&amp;#10;    } else {&amp;#10;        if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;good&quot;)) &amp;&amp; (condition === 2))) {&amp;#10;            feedback_option = &quot;no&quot;;&amp;#10;            decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;            feedback_stim_draw = horizontal_feedback_stim;&amp;#10;        } else {&amp;#10;            if ((((feedback_outcome === &quot;veridical_feedback&quot;) &amp;&amp; (outcome === &quot;bad&quot;)) &amp;&amp; (condition === 2))) {&amp;#10;                feedback_option = &quot;no&quot;;&amp;#10;                decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;                feedback_stim_draw = vertical_feedback_stim;&amp;#10;            } else {&amp;#10;                if ((feedback_outcome === &quot;no_feedback&quot;)) {&amp;#10;                    feedback_option = &quot;no&quot;;&amp;#10;                    decision_to_work_for_feedback = &quot;n/a&quot;;&amp;#10;                    feedback_stim_draw = grey_no_feedback_stim;&amp;#10;                } else {&amp;#10;                    if ((feedback_outcome === &quot;work_option&quot;)) {&amp;#10;                        feedback_option = &quot;yes&quot;;&amp;#10;                        feedback_stim_draw = grey_no_feedback_stim;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# initialize empty lists so we can add data&amp;#10;decision_to_work_for_feedback = []&amp;#10;decision_to_work_for_feedback_rt = []&amp;#10;time_of_press_list = []&amp;#10;current_work_rate_list = []&amp;#10;current_opacity_level_list = []&amp;#10;final_opacity = []&amp;#10;feedback_stim_draw = []&amp;#10;feedback_option = []&amp;#10;&amp;#10;# draw feedback logic&amp;#10;if feedback_outcome == 'veridical_feedback' and outcome == 'good' and condition == 1:&amp;#10;    feedback_option = 'no'&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    feedback_stim_draw = vertical_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'bad' and condition == 1:&amp;#10;    feedback_option = 'no'&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    feedback_stim_draw = horizontal_feedback_stim&amp;#10;    &amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'good' and condition == 2:&amp;#10;    feedback_option = 'no'&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    feedback_stim_draw = horizontal_feedback_stim&amp;#10;    &amp;#10;elif feedback_outcome == 'veridical_feedback' and outcome == 'bad' and condition == 2:&amp;#10;    feedback_option = 'no'&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    feedback_stim_draw = vertical_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'no_feedback':&amp;#10;    feedback_option = 'no'&amp;#10;    decision_to_work_for_feedback = 'n/a'&amp;#10;    feedback_stim_draw = grey_no_feedback_stim&amp;#10;&amp;#10;elif feedback_outcome == 'work_option':&amp;#10;    feedback_option = 'yes'&amp;#10;    feedback_stim_draw = grey_no_feedback_stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="start_feedback_custom" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="tap_for_feedback_choice">
      <ImageComponent name="feedback_question">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="feedback_choice/feedback_choice.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="feedback_question" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="select_feedback_choice_press">
        <Param name="allowedKeys" updates="constant" val="'capslock','space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="select_feedback_choice_press" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="track_selection_work_choice">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((select_feedback_choice_press.keys === &quot;capslock&quot;)) {&amp;#10;    decision_to_work_for_feedback = &quot;yes&quot;;&amp;#10;    decision_to_work_for_feedback_highlight_yellow = feedback_yes_screen;&amp;#10;} else {&amp;#10;    if ((select_feedback_choice_press.keys === &quot;return&quot;)) {&amp;#10;        decision_to_work_for_feedback = &quot;no&quot;;&amp;#10;        decision_to_work_for_feedback_highlight_yellow = feedback_no_screen;&amp;#10;    }&amp;#10;}&amp;#10;stim_to_draw_under_grey_square = [];&amp;#10;if ((condition === 1)) {&amp;#10;    if ((outcome === &quot;good&quot;)) {&amp;#10;        stim_to_draw_under_grey_square = vertical_feedback_stim;&amp;#10;    } else {&amp;#10;        if ((outcome === &quot;bad&quot;)) {&amp;#10;            stim_to_draw_under_grey_square = horizontal_feedback_stim;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        if ((outcome === &quot;good&quot;)) {&amp;#10;            stim_to_draw_under_grey_square = horizontal_feedback_stim;&amp;#10;        } else {&amp;#10;            if ((outcome === &quot;bad&quot;)) {&amp;#10;                stim_to_draw_under_grey_square = vertical_feedback_stim;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if select_feedback_choice_press.keys == 'capslock':&amp;#10;    decision_to_work_for_feedback = 'yes'&amp;#10;    decision_to_work_for_feedback_highlight_yellow = feedback_yes_screen&amp;#10;elif select_feedback_choice_press.keys == 'return':&amp;#10;    decision_to_work_for_feedback = 'no'&amp;#10;    decision_to_work_for_feedback_highlight_yellow = feedback_no_screen&amp;#10;&amp;#10;# lets set the stim to draw for feedback contingent on condition and outcome&amp;#10;stim_to_draw_under_grey_square = []&amp;#10;&amp;#10;# in condition 1, the vertical stim means reward&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    if outcome == 'good':&amp;#10;        stim_to_draw_under_grey_square = vertical_feedback_stim&amp;#10;        &amp;#10;    elif outcome == 'bad':&amp;#10;        stim_to_draw_under_grey_square = horizontal_feedback_stim&amp;#10;        &amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    if outcome == 'good':&amp;#10;        stim_to_draw_under_grey_square = horizontal_feedback_stim&amp;#10;        &amp;#10;    elif outcome == 'bad':&amp;#10;        stim_to_draw_under_grey_square = vertical_feedback_stim" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="track_selection_work_choice" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="non_work_for_feedback">
      <ImageComponent name="draw_feedback_non_work">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="feedback_stim_draw" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="draw_feedback_non_work" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="grey_feedback_work">
      <ImageComponent name="grey_no_feedback_pre_work_option">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="stimuli/noninformative_feedback.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="grey_no_feedback_pre_work_option" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="highlight_selected_feedback_choice_draw_screen">
      <ImageComponent name="yellow_highlight_choice_slide">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="decision_to_work_for_feedback_highlight_yellow" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="yellow_highlight_choice_slide" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="feedback_tap">
      <CodeComponent name="tap_feedback_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="timer.reset()&amp;#10;while timer.getTime() &lt; 3.5:&amp;#10;       &amp;#10;    current_time = timer.getTime()&amp;#10;    key = kb.getKeys()&amp;#10;        &amp;#10;    if timer.getTime() &lt; 2.5:&amp;#10;            &amp;#10;        if 'space' in key:&amp;#10;        &amp;#10;            time_of_press = current_time&amp;#10;            time_of_press_list.append(time_of_press)&amp;#10;            work_total_presses = work_total_presses + 1&amp;#10;            current_work_rate = work_total_presses / current_time&amp;#10;            current_work_rate_list.append(current_work_rate)&amp;#10;            current_opacity_level_list.append(grey_no_feedback_stim.opacity)&amp;#10;                &amp;#10;            if current_work_rate &gt; final_work_for_feedback_threshold:&amp;#10;&amp;#10;                grey_no_feedback_stim.opacity = grey_no_feedback_stim.opacity - update_opacity&amp;#10;&amp;#10;        feedback_stim_to_draw.draw()&amp;#10;        grey_no_feedback_stim.draw()&amp;#10;        win.flip()&amp;#10;            &amp;#10;    if timer.getTime() &gt; 2.5:&amp;#10;            &amp;#10;        if 'space' in key:&amp;#10;&amp;#10;            time_of_press = current_time&amp;#10;            time_of_press_list.append(time_of_press)&amp;#10;            work_total_presses = work_total_presses + 1&amp;#10;            current_work_rate = work_total_presses / current_time&amp;#10;            current_work_rate_list.append(current_work_rate)&amp;#10;            current_opacity_level_list.append(grey_no_feedback_stim.opacity)&amp;#10;&amp;#10;        win.flip() # flip to blank screen but still collect presses&amp;#10;&amp;#10;# add data&amp;#10;psychoJS.experiment.addData('decision_to_work_for_feedback', decision_to_work_for_feedback)&amp;#10;psychoJS.experiment.addData('decision_to_work_for_feedback_rt', decision_to_work_for_feedback_rt)&amp;#10;psychoJS.experiment.addData('work_total_presses', work_total_presses)&amp;#10;psychoJS.experiment.addData('time_of_presses', time_of_press_list)&amp;#10;psychoJS.experiment.addData('current_work_rate', current_work_rate_list)&amp;#10;psychoJS.experiment.addData('final_opacity', final_opacity)&amp;#10;psychoJS.experiment.addData('current_opacity_level_list', current_opacity_level_list)&amp;#10;&amp;#10;# end of trial - move to next line in data output&amp;#10;exp.nextEntry()" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;timer.reset();&amp;#10;while ((timer.getTime() &lt; 3.5)) {&amp;#10;    current_time = timer.getTime();&amp;#10;    key = kb.getKeys();&amp;#10;    if ((timer.getTime() &lt; 2.5)) {&amp;#10;        if (_pj.in_es6(&quot;space&quot;, key)) {&amp;#10;            time_of_press = current_time;&amp;#10;            time_of_press_list.append(time_of_press);&amp;#10;            work_total_presses = (work_total_presses + 1);&amp;#10;            current_work_rate = (work_total_presses / current_time);&amp;#10;            current_work_rate_list.append(current_work_rate);&amp;#10;            current_opacity_level_list.append(grey_no_feedback_stim.opacity);&amp;#10;            if ((current_work_rate &gt; final_work_for_feedback_threshold)) {&amp;#10;                grey_no_feedback_stim.opacity = (grey_no_feedback_stim.opacity - update_opacity);&amp;#10;            }&amp;#10;        }&amp;#10;        feedback_stim_to_draw.draw();&amp;#10;        grey_no_feedback_stim.draw();&amp;#10;        win.flip();&amp;#10;    }&amp;#10;    if ((timer.getTime() &gt; 2.5)) {&amp;#10;        if (_pj.in_es6(&quot;space&quot;, key)) {&amp;#10;            time_of_press = current_time;&amp;#10;            time_of_press_list.append(time_of_press);&amp;#10;            work_total_presses = (work_total_presses + 1);&amp;#10;            current_work_rate = (work_total_presses / current_time);&amp;#10;            current_work_rate_list.append(current_work_rate);&amp;#10;            current_opacity_level_list.append(grey_no_feedback_stim.opacity);&amp;#10;        }&amp;#10;        win.flip();&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;decision_to_work_for_feedback&quot;, decision_to_work_for_feedback);&amp;#10;psychoJS.experiment.addData(&quot;decision_to_work_for_feedback_rt&quot;, decision_to_work_for_feedback_rt);&amp;#10;psychoJS.experiment.addData(&quot;work_total_presses&quot;, work_total_presses);&amp;#10;psychoJS.experiment.addData(&quot;time_of_presses&quot;, time_of_press_list);&amp;#10;psychoJS.experiment.addData(&quot;current_work_rate&quot;, current_work_rate_list);&amp;#10;psychoJS.experiment.addData(&quot;final_opacity&quot;, final_opacity);&amp;#10;psychoJS.experiment.addData(&quot;current_opacity_level_list&quot;, current_opacity_level_list);&amp;#10;exp.nextEntry();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="tap_feedback_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback_work_logic">
      <ImageComponent name="feedback_work_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="$load_feedback_stim_to_draw" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="feedback_work_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="feedback_practice_logic">
      <CodeComponent name="feedback_outcome_to_draw">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;    &amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="feedback_outcome_to_draw" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="no_feedback_work_logic">
      <ImageComponent name="no_feedback_work_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="$load_feedback_stim_to_draw" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="no_feedback_work_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="draw_FB">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="load_feedback_stim_to_draw.pos = [0, 0];&amp;#10;load_feedback_stim_to_draw.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="load_feedback_stim_to_draw.pos = (0,0)&amp;#10;load_feedback_stim_to_draw.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="load_feedback_stim_to_draw.pos = [0, 0];&amp;#10;load_feedback_stim_to_draw.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="load_feedback_stim_to_draw.pos = (0,0)&amp;#10;&amp;#10;load_feedback_stim_to_draw.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_FB" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="ask_want_to_work_for_feedback">
      <KeyboardComponent name="feedback_choice_key_resp">
        <Param name="allowedKeys" updates="constant" val="'o','w'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="feedback_choice_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="feedback_choice_slide">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="feedback_choice/feedback_choice.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="feedback_choice_slide" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="select_highlighted_slide">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="highlight_no = [];&amp;#10;highlight_yes = [];&amp;#10;if ((feedback_choice_key_resp.keys === &quot;w&quot;)) {&amp;#10;    decision_to_work_for_feedback = &quot;yes&quot;;&amp;#10;    highlight_no = 0;&amp;#10;    highlight_yes = 1;&amp;#10;} else {&amp;#10;    if ((feedback_choice_key_resp.keys === &quot;o&quot;)) {&amp;#10;        decision_to_work_for_feedback = &quot;no&quot;;&amp;#10;        highlight_no = 1;&amp;#10;        highlight_yes = 0;&amp;#10;    } else {&amp;#10;        decision_to_work_for_feedback = &quot;missed&quot;;&amp;#10;        highlight_no = 0;&amp;#10;        highlight_yes = 0;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# intialize empty lists to branch experiment&amp;#10;highlight_no = []&amp;#10;highlight_yes = []&amp;#10;&amp;#10;# decide if we should draw yes or no highlighted slide&amp;#10;if feedback_choice_key_resp.keys == 'w':     &amp;#10;    decision_to_work_for_feedback = 'yes'&amp;#10;    highlight_no = 0&amp;#10;    highlight_yes = 1&amp;#10;        &amp;#10;elif feedback_choice_key_resp.keys == 'o':&amp;#10;    decision_to_work_for_feedback = 'no'       &amp;#10;    highlight_no = 1&amp;#10;    highlight_yes = 0&amp;#10;    &amp;#10;else:&amp;#10;    decision_to_work_for_feedback = 'missed'       &amp;#10;    highlight_no = 0&amp;#10;    highlight_yes = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="select_highlighted_slide" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="no_fb_highlight">
      <ImageComponent name="no_fb_slide">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="feedback_choice/feedback_no.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="no_fb_slide" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="yes_fb_highlight">
      <ImageComponent name="yes_fb_slide">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="feedback_choice/feedback_yes.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="yes_fb_slide" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="fb_work_time">
      <CodeComponent name="decide_stim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="feedback_stim_to_draw = [];&amp;#10;if ((condition === 1)) {&amp;#10;    if ((outcome === &quot;good&quot;)) {&amp;#10;        feedback_stim_to_draw = vertical_feedback_stim;&amp;#10;    } else {&amp;#10;        if ((outcome === &quot;bad&quot;)) {&amp;#10;            feedback_stim_to_draw = horizontal_feedback_stim;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((condition === 2)) {&amp;#10;        if ((outcome === &quot;good&quot;)) {&amp;#10;            feedback_stim_to_draw = horizontal_feedback_stim;&amp;#10;        } else {&amp;#10;            if ((outcome === &quot;bad&quot;)) {&amp;#10;                feedback_stim_to_draw = vertical_feedback_stim;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# lets set the stim to draw for feedback contingent on condition and outcome&amp;#10;feedback_stim_to_draw = []&amp;#10;&amp;#10;# in condition 1, the vertical stim means reward&amp;#10;if condition == 1:&amp;#10;    &amp;#10;    if outcome == 'good':&amp;#10;        feedback_stim_to_draw = vertical_feedback_stim&amp;#10;        &amp;#10;    elif outcome == 'bad':&amp;#10;        feedback_stim_to_draw = horizontal_feedback_stim&amp;#10;        &amp;#10;# in condition 2, the horizontal stim means reward&amp;#10;elif condition == 2:&amp;#10;    &amp;#10;    if outcome == 'good':&amp;#10;        feedback_stim_to_draw = horizontal_feedback_stim&amp;#10;        &amp;#10;    elif outcome == 'bad':&amp;#10;        feedback_stim_to_draw = vertical_feedback_stim" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="decide_stim" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="missed_trial_logic">
      <TextComponent name="missed_trial_practice">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="missed_trial_practice" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="No response recorded" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="grey_work_for_fb">
      <ImageComponent name="grey_stim_work_for_fb">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="$load_feedback_stim_to_draw" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="grey_stim_work_for_fb" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="draw_grey_fb">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="load_feedback_stim_to_draw.pos = [0, 0];&amp;#10;load_feedback_stim_to_draw.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="load_feedback_stim_to_draw.pos = (0,0)&amp;#10;load_feedback_stim_to_draw.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="load_feedback_stim_to_draw.pos = [0, 0];&amp;#10;load_feedback_stim_to_draw.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="load_feedback_stim_to_draw.pos = (0,0)&amp;#10;load_feedback_stim_to_draw.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_grey_fb" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="draw_feedback_to_screen">
      <CodeComponent name="custom_draw_feedback">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="feedback_stim_to_draw.pos = [0, 0];&amp;#10;grey_no_feedback_stim.pos = [0, 0];&amp;#10;feedback_stim_to_draw.opacity = 1;&amp;#10;grey_no_feedback_stim.opacity = 1;&amp;#10;update_opacity = 0.015;&amp;#10;time_of_press = [];&amp;#10;time_of_press_list = [];&amp;#10;work_total_presses = 0;&amp;#10;current_work_rate = [];&amp;#10;current_work_rate_list = [];&amp;#10;current_opacity_level_list = [];&amp;#10;final_opacity_level = [];&amp;#10;event.clearEvents();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="feedback_stim_to_draw.pos = (0,0)&amp;#10;grey_no_feedback_stim.pos = (0,0)&amp;#10;&amp;#10;feedback_stim_to_draw.opacity = 1&amp;#10;grey_no_feedback_stim.opacity = 1&amp;#10;&amp;#10;update_opacity = .0150&amp;#10;&amp;#10;time_of_press = []&amp;#10;time_of_press_list = []&amp;#10;&amp;#10;work_total_presses = 0&amp;#10;&amp;#10;current_work_rate = []&amp;#10;current_work_rate_list = []&amp;#10;&amp;#10;current_opacity_level_list = []&amp;#10;final_opacity_level = []&amp;#10;&amp;#10;event.clearEvents()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="feedback_stim_to_draw.setAutoDraw(True)&amp;#10;grey_no_feedback_stim.setAutoDraw(True)&amp;#10;&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;if 'space' in keys and draw_feedback_to_screenClock.getTime() &lt; 3.0:&amp;#10;#if 'space' in keys:&amp;#10;    &amp;#10;    time_of_press = draw_feedback_to_screenClock.getTime()&amp;#10;    time_of_press_list.push(time_of_press)&amp;#10;    work_total_presses = work_total_presses + 1&amp;#10;    current_work_rate = work_total_presses / time_of_press&amp;#10;    current_opacity_level_list.push(grey_no_feedback_stim.opacity)&amp;#10;    &amp;#10;    if current_work_rate &gt; final_work_for_feedback_threshold:&amp;#10;        &amp;#10;        grey_no_feedback_stim.opacity = grey_no_feedback_stim.opacity - update_opacity" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;feedback_stim_to_draw.setAutoDraw(true);&amp;#10;grey_no_feedback_stim.setAutoDraw(true);&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;if ((_pj.in_es6(&quot;space&quot;, keys) &amp;&amp; (draw_feedback_to_screenClock.getTime() &lt; 3.0))) {&amp;#10;    time_of_press = draw_feedback_to_screenClock.getTime();&amp;#10;    time_of_press_list.push(time_of_press);&amp;#10;    work_total_presses = (work_total_presses + 1);&amp;#10;    current_work_rate = (work_total_presses / time_of_press);&amp;#10;    current_opacity_level_list.push(grey_no_feedback_stim.opacity);&amp;#10;    if ((current_work_rate &gt; final_work_for_feedback_threshold)) {&amp;#10;        grey_no_feedback_stim.opacity = (grey_no_feedback_stim.opacity - update_opacity);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="feedback_stim_to_draw.setAutoDraw(false);&amp;#10;grey_no_feedback_stim.setAutoDraw(false);&amp;#10;final_opacity_level = grey_no_feedback_stim.opacity;&amp;#10;event.clearEvents();&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="feedback_stim_to_draw.setAutoDraw(False)&amp;#10;grey_no_feedback_stim.setAutoDraw(False)&amp;#10;final_opacity_level = grey_no_feedback_stim.opacity&amp;#10;&amp;#10;event.clearEvents()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="custom_draw_feedback" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="work_for_feedback_space_bar_press">
        <Param name="allowedKeys" updates="constant" val="'e'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="work_for_feedback_space_bar_press" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="post_work_blank">
      <ImageComponent name="blank_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="None" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="blank_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="post_work_space_presses">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="post_work_space_presses" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="s_2">
      <ImageComponent name="image_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every frame" val="$'calibration/Slide' + slide_number + '.jpeg'" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# set calibration parameters&amp;#10;calibration_update_duration = .25&amp;#10;calibration_total_presses = 0 &amp;#10;slide_number = 2" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="calibration_update_duration = 0.25;&amp;#10;calibration_total_presses = 0;&amp;#10;slide_number = 2;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="e">
      <ImageComponent name="image_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="'calibration/Slide' + $slide_number + '.jpeg'" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="code_6">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="slide_number = 2" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="slide_number = 2;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="calib_last">
      <CodeComponent name="calib_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="calibration_update_duration = 0.25;&amp;#10;calibration_total_presses = 0;&amp;#10;slide_number = 2;&amp;#10;show_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: ((&quot;calibration/slide&quot; + slide_number.toString()) + &quot;.png&quot;), &quot;size&quot;: [1, 0.75]});&amp;#10;calibration_update_duration = 0.25;&amp;#10;calibration_total_presses = 0;&amp;#10;calibration_time = 3;&amp;#10;time_of_calibration_press = [];&amp;#10;time_of_calibration_press_list = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# set calibration parameters&amp;#10;calibration_update_duration = .25&amp;#10;calibration_total_presses = 0 &amp;#10;slide_number = 2&amp;#10;show_slide = visual.ImageStim(win=win,&amp;#10;                            image='calibration/slide' + str(slide_number) + '.png',&amp;#10;                            size = (1,.75))&amp;#10;&amp;#10;calibration_update_duration = .25&amp;#10;calibration_total_presses = 0&amp;#10;calibration_time = 3&amp;#10;time_of_calibration_press = []&amp;#10;time_of_calibration_press_list = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="show_slide = visual.ImageStim(win=win,&amp;#10;                            image='calibration/slide' + str(slide_number) + '.png',&amp;#10;                            size = (1,.75))&amp;#10;&amp;#10;show_slide.setAutoDraw(True)&amp;#10;&amp;#10;calib_keys = psychoJS.eventManager.getKeys();&amp;#10;if 'space' in calib_keys:&amp;#10;    &amp;#10;    time_of_calibration_press = calib_lastClock.getTime()&amp;#10;    time_of_calibration_press_list.push(time_of_calibration_press)&amp;#10;    calibration_total_presses = calibration_total_presses + 1&amp;#10;    &amp;#10;    if calib_lastClock.getTime() &gt; calibration_update_duration:&amp;#10;        slide_number = slide_number + 1&amp;#10;        calibration_update_duration = calibration_update_duration + 0.25&amp;#10;&amp;#10;if calib_lastClock.getTime() &gt; 3:&amp;#10;    show_slide.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;show_slide = new visual.ImageStim({&quot;win&quot;: win, &quot;image&quot;: ((&quot;calibration/slide&quot; + slide_number.toString()) + &quot;.png&quot;), &quot;size&quot;: [1, 0.75]});&amp;#10;show_slide.setAutoDraw(true);&amp;#10;calib_keys = psychoJS.eventManager.getKeys();&amp;#10;if (_pj.in_es6(&quot;space&quot;, calib_keys)) {&amp;#10;    time_of_calibration_press = calib_lastClock.getTime();&amp;#10;    time_of_calibration_press_list.push(time_of_calibration_press);&amp;#10;    calibration_total_presses = (calibration_total_presses + 1);&amp;#10;    if ((calib_lastClock.getTime() &gt; calibration_update_duration)) {&amp;#10;        slide_number = (slide_number + 1);&amp;#10;        calibration_update_duration = (calibration_update_duration + 0.25);&amp;#10;    }&amp;#10;}&amp;#10;if ((calib_lastClock.getTime() &gt; 3)) {&amp;#10;    show_slide.setAutoDraw(false);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="show_slide.setAutoDraw(false);&amp;#10;blank_screen_image_black.setAutoDraw(true);&amp;#10;maximum_work_for_feedback_threshold = (calibration_total_presses / calibration_time);&amp;#10;work_for_feedback_threshold_multiplier = 0.9;&amp;#10;final_work_for_feedback_threshold = (work_for_feedback_threshold_multiplier * maximum_work_for_feedback_threshold);&amp;#10;psychoJS.experiment.addData(&quot;maximum_work_for_feedback_threshold&quot;, maximum_work_for_feedback_threshold);&amp;#10;psychoJS.experiment.addData(&quot;final_work_for_feedback_threshold&quot;, final_work_for_feedback_threshold);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="show_slide.setAutoDraw(False)&amp;#10;blank_screen_image_black.setAutoDraw(True)&amp;#10;&amp;#10;# calculate work for feedback threshold&amp;#10;maximum_work_for_feedback_threshold = calibration_total_presses / calibration_time&amp;#10;work_for_feedback_threshold_multiplier = .9&amp;#10;final_work_for_feedback_threshold = work_for_feedback_threshold_multiplier * maximum_work_for_feedback_threshold&amp;#10;&amp;#10;# add data&amp;#10;psychoJS.experiment.addData('maximum_work_for_feedback_threshold', maximum_work_for_feedback_threshold)&amp;#10;psychoJS.experiment.addData('final_work_for_feedback_threshold', final_work_for_feedback_threshold)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="calib_code" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="calibration_space_bar_press">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="calibration_space_bar_press" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="isi_screen">
      <PolygonComponent name="isi_stim">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val=".01" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="isi_stim" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="cross" valType="str"/>
        <Param name="size" updates="constant" val="(0.05, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$isi" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="end_loop_data_log">
      <CodeComponent name="add_custom_data_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;decision_to_work_for_feedback&quot;, decision_to_work_for_feedback);&amp;#10;psychoJS.experiment.addData(&quot;time_of_press_list&quot;, time_of_press_list);&amp;#10;psychoJS.experiment.addData(&quot;work_total_presses&quot;, work_total_presses);&amp;#10;psychoJS.experiment.addData(&quot;current_work_rate_list&quot;, current_work_rate_list);&amp;#10;psychoJS.experiment.addData(&quot;current_opacity_level_list&quot;, current_opacity_level_list);&amp;#10;psychoJS.experiment.addData(&quot;final_opacity_level&quot;, final_opacity_level);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# add data&amp;#10;psychoJS.experiment.addData('decision_to_work_for_feedback', decision_to_work_for_feedback)&amp;#10;psychoJS.experiment.addData('time_of_press_list', time_of_press_list)&amp;#10;psychoJS.experiment.addData('work_total_presses', work_total_presses)&amp;#10;psychoJS.experiment.addData('current_work_rate_list', current_work_rate_list)&amp;#10;psychoJS.experiment.addData('current_opacity_level_list', current_opacity_level_list)&amp;#10;psychoJS.experiment.addData('final_opacity_level', final_opacity_level)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="add_custom_data_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="highlight_sam_hu_pre_choice">
      <ImageComponent name="Sam_hu_highlight_pre">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_hu.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Sam_hu_highlight_pre" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="draw_answer">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="answer_to_draw.fillColor=[.3,.5,.7]&amp;#10;answer_to_draw.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="answer_to_draw.fillColor = [0.3, 0.5, 0.7];&amp;#10;answer_to_draw.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_answer" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="highlight_sam_ec_pre_choice">
      <ImageComponent name="sam_ec_pre_highlight">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_ec.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="sam_ec_pre_highlight" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="draw_ec_pre_answer">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="answer_to_draw.fillColor=[.3,.5,.7]&amp;#10;answer_to_draw.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="answer_to_draw.fillColor = [0.3, 0.5, 0.7];&amp;#10;answer_to_draw.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_ec_pre_answer" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="highlight_post_sam_hu">
      <ImageComponent name="sam_hu_highlight_post">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_hu.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="sam_hu_highlight_post" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="draw_post_hu_highlight_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="answer_to_draw.fillColor=[.3,.5,.7]&amp;#10;answer_to_draw.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="answer_to_draw.fillColor = [0.3, 0.5, 0.7];&amp;#10;answer_to_draw.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_post_hu_highlight_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="highlight_sam_ec_post_choice">
      <ImageComponent name="sam_ec_post_highlight">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="SAM/SAM_ec.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="sam_ec_post_highlight" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="draw_sam_ec">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="answer_to_draw.fillColor=[.3,.5,.7]&amp;#10;answer_to_draw.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="answer_to_draw.fillColor = [0.3, 0.5, 0.7];&amp;#10;answer_to_draw.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="answer_to_draw.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="answer_to_draw.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_sam_ec" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="introduce_keyboard_hand_positioning">
      <CodeComponent name="draw_kb">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="intro_to_kb.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="intro_to_kb.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="intro_to_kb.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="intro_to_kb.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_kb" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="draw_kb_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="draw_kb_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_instructions_8_01">
      <CodeComponent name="draw_slide_8_01">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_8_01.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_8_01.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_8_01.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_8_01.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_slide_8_01" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_8_01_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_8_01_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_instructions_8_02">
      <CodeComponent name="draw_slide_08_02">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_8_02.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_8_02.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_8_02.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_8_02.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_slide_08_02" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_8_02_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_8_02_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_instructions_8_03">
      <CodeComponent name="draw_slide_08_03">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_8_03.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_8_03.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_8_03.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_8_03.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_slide_08_03" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_8_03_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_8_03_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_instructions_9_01">
      <CodeComponent name="continue_further">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((random_feedback_stim === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0];&amp;#10;    grey_no_feedback_stim.pos = [0, 0];&amp;#10;    grey_no_feedback_stim.opacity = 0.925;&amp;#10;    instructions_slide_nine.setAutoDraw(true);&amp;#10;    horizontal_feedback_stim.setAutoDraw(true);&amp;#10;    grey_no_feedback_stim.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((random_feedback_stim === 2)) {&amp;#10;        vertical_feedback_stim.pos = [0, 0];&amp;#10;        grey_no_feedback_stim.pos = [0, 0];&amp;#10;        grey_no_feedback_stim.opacity = 0.925;&amp;#10;        instructions_slide_nine.setAutoDraw(true);&amp;#10;        vertical_feedback_stim.setAutoDraw(true);&amp;#10;        grey_no_feedback_stim.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if random_feedback_stim == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.opacity = .925&amp;#10;&amp;#10;    instructions_slide_nine.setAutoDraw(True)&amp;#10;    horizontal_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)&amp;#10;&amp;#10;elif random_feedback_stim == 2:&amp;#10;    &amp;#10;    vertical_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.opacity = .925&amp;#10;    &amp;#10;    instructions_slide_nine.setAutoDraw(True)&amp;#10;    vertical_feedback_stim.setAutoDraw(True)&amp;#10;    grey_no_feedback_stim.setAutoDraw(True)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((random_feedback_stim === 1)) {&amp;#10;    horizontal_feedback_stim.pos = [0, 0];&amp;#10;    grey_no_feedback_stim.pos = [0, 0];&amp;#10;    grey_no_feedback_stim.opacity = 0.925;&amp;#10;    instructions_slide_nine.setAutoDraw(false);&amp;#10;    horizontal_feedback_stim.setAutoDraw(false);&amp;#10;    grey_no_feedback_stim.setAutoDraw(false);&amp;#10;} else {&amp;#10;    if ((random_feedback_stim === 2)) {&amp;#10;        vertical_feedback_stim.pos = [0, 0];&amp;#10;        grey_no_feedback_stim.pos = [0, 0];&amp;#10;        grey_no_feedback_stim.opacity = 0.925;&amp;#10;        instructions_slide_nine.setAutoDraw(false);&amp;#10;        vertical_feedback_stim.setAutoDraw(false);&amp;#10;        grey_no_feedback_stim.setAutoDraw(false);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if random_feedback_stim == 1:&amp;#10;    &amp;#10;    horizontal_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.opacity = .925&amp;#10;&amp;#10;    instructions_slide_nine.setAutoDraw(False)&amp;#10;    horizontal_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)&amp;#10;&amp;#10;elif random_feedback_stim == 2:&amp;#10;    &amp;#10;    vertical_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.pos = (0, 0)&amp;#10;    grey_no_feedback_stim.opacity = .925&amp;#10;    &amp;#10;    instructions_slide_nine.setAutoDraw(False)&amp;#10;    vertical_feedback_stim.setAutoDraw(False)&amp;#10;    grey_no_feedback_stim.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="continue_further" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_9_01_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_9_01_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_slide_09_01">
      <CodeComponent name="draw_09_01">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_09_01.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_09_01.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_09_01.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_09_01.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_09_01" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_09_01_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_09_01_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_slide_09_02">
      <CodeComponent name="draw_slide_09_02">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_09_02.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_09_02.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_09_02.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_09_02.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_slide_09_02" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_09_02_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_09_02_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_slide_10_01">
      <CodeComponent name="draw_10_01">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_10_01.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_10_01.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_10_01.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_10_01.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_10_01" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_10_01_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_10_01_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="continue_slide_10_02">
      <CodeComponent name="draw_10_02">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instructions_slide_10_02.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instructions_slide_10_02.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="instructions_slide_10_02.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="instructions_slide_10_02.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_10_02" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="slide_10_02_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="slide_10_02_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="slide_max_points">
      <CodeComponent name="draw_max_points">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="max_points.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="max_points.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="max_points.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="max_points.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="draw_max_points" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="max_points_slide_key_resp">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="max_points_slide_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="testx">
      <KeyboardComponent name="dsss">
        <Param name="allowedKeys" updates="constant" val="'1','2'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="dsss" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_7">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="better_fractal = []&amp;#10;x = []&amp;#10;y = []&amp;#10;&amp;#10;&amp;#10;if post_task_fractal_selection == 1:&amp;#10;      &amp;#10;    x = [0.2, -.03]&amp;#10;    y = [0.2, .03]&amp;#10;&amp;#10;elif post_task_fractal_selection == 2:&amp;#10;&amp;#10;    x = [0.2, -.03]&amp;#10;    y = [0.2, .03]&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="better_fractal = [];&amp;#10;x = [];&amp;#10;y = [];&amp;#10;if ((post_task_fractal_selection === 1)) {&amp;#10;    x = [0.2, (- 0.03)];&amp;#10;    y = [0.2, 0.03];&amp;#10;} else {&amp;#10;    if ((post_task_fractal_selection === 2)) {&amp;#10;        x = [0.2, (- 0.03)];&amp;#10;        y = [0.2, 0.03];&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="post_task_fractal_slide.setAutoDraw(true);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="post_task_fractal_slide.setAutoDraw(True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="post_task_fractal_slide.setAutoDraw(false);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="post_task_fractal_slide.setAutoDraw(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="stimuli/fractal_blossom.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="($x_1,$x_2) " valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.15, 01.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="image_5">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="stimuli/fractal_octopus.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.15, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="d">
      <CodeComponent name="code_8">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="get_email">
      <TextComponent name="email_instructions">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="email_instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Please type your email below to recieve credit for this task:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextboxComponent name="textbox_email">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="True" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="textbox_email" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="set every frame" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.15)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="Type email here" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <PolygonComponent name="submit_email">
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="submit_email" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.5, 0.10)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="submit">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="code"/>
        <Param name="name" updates="None" val="submit" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0-.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Double Click Here To Submit and Continue" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <MouseComponent name="mouse_email">
        <Param name="clickable" updates="constant" val="submit_email" valType="code"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="mouse_email" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="final" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <KeyboardComponent name="enter_email">
        <Param name="allowedKeys" updates="constant" val="'enter','return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="enter_email" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="submit_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="submit_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press ENTER or RETURN to submit and continue." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="email_custom">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp = psychoJS.experiment;&amp;#10;thisExp.addData(&quot;email&quot;, textbox_email._pixi.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp=psychoJS.experiment;&amp;#10;thisExp.addData('email', textbox_email._pixi.text);" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="email_custom" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="collect_email">
      <KeyboardComponent name="get_email_keys">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="get_email_keys" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="email_feedback">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="email_feedback" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$screen_text" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="email_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="screen_text = &quot;&quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="screen_text = ''" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if 'backspace' in get_email_keys.keys:&amp;#10;    get_email_keys.keys.remove('backspace')&amp;#10;    &amp;#10;    if(len(get_email_keys.keys)) &gt; 0:&amp;#10;        get_email_keys.keys.pop()&amp;#10;        &amp;#10;elif 'return' in get_email_keys.keys:&amp;#10;    get_email_keys.keys.remove('return')&amp;#10;    &amp;#10;    screen_text = ''.join(get_email_keys.keys)&amp;#10;    psychoJS.experiment.addData('email', screen_text)&amp;#10;&amp;#10;    continueRoutine = False&amp;#10;        &amp;#10;screen_text = ''.join(get_email_keys.keys)&amp;#10;&amp;#10;&amp;#10;        " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (_pj.in_es6(&quot;backspace&quot;, get_email_keys.keys)) {&amp;#10;    get_email_keys.keys.remove(&quot;backspace&quot;);&amp;#10;    if ((get_email_keys.keys.length &gt; 0)) {&amp;#10;        get_email_keys.keys.pop();&amp;#10;    }&amp;#10;} else {&amp;#10;    if (_pj.in_es6(&quot;return&quot;, get_email_keys.keys)) {&amp;#10;        get_email_keys.keys.remove(&quot;return&quot;);&amp;#10;        screen_text = &quot;&quot;.join(get_email_keys.keys);&amp;#10;        psychoJS.experiment.addData(&quot;email&quot;, screen_text);&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;screen_text = &quot;&quot;.join(get_email_keys.keys);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="email_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="type_email">
      <TextboxComponent name="subject_email">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="black" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="True" valType="bool"/>
        <Param name="fillColor" updates="constant" val="white" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="subject_email" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="type email here" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <KeyboardComponent name="key_resp_email">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_email" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="subject_response = ''" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="subject_response = &quot;&quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="subject_response = subject_email.text;&amp;#10;psychoJS.experiment.addData(&quot;email_test&quot;, subject_response);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="subject_response = subject_email.text&amp;#10;psychoJS.experiment.addData('email_test', subject_response)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="initialize_stim_and_key_variables"/>
    <Routine name="get_email"/>
    <Routine name="welcome_slide"/>
    <Routine name="SAM_hu_directions"/>
    <Routine name="SAM_hu_question"/>
    <Routine name="highlight_sam_hu_pre_choice"/>
    <Routine name="SAM_ec_directions"/>
    <Routine name="SAM_ec_question"/>
    <Routine name="highlight_sam_ec_pre_choice"/>
    <Routine name="introduce_keyboard_hand_positioning"/>
    <Routine name="begin_instructions"/>
    <Routine name="continue_begin"/>
    <Routine name="slide_max_points"/>
    <Routine name="fractal_selection_quiz"/>
    <Routine name="fractal_reminder_show"/>
    <Routine name="draw_slide_3"/>
    <Routine name="display_feedback_meanings"/>
    <Routine name="first_quiz_first_question"/>
    <Routine name="first_quiz_first_question_reminder"/>
    <Routine name="first_quiz_second_question"/>
    <Routine name="first_quiz_second_question_reminder"/>
    <Routine name="first_quiz_third_question"/>
    <Routine name="first_quiz_third_question_reminder"/>
    <Routine name="total_reminder_one"/>
    <Routine name="continue_instructions_8_01"/>
    <Routine name="continue_instructions_8_02"/>
    <Routine name="continue_instructions_8_03"/>
    <Routine name="feedback_selection_quiz"/>
    <Routine name="feedback_post_quiz_reminder"/>
    <Routine name="continue_slide_09_01"/>
    <Routine name="continue_slide_09_02"/>
    <Routine name="continue_slide_10_01"/>
    <Routine name="continue_slide_10_02"/>
    <Routine name="attention_shape_check"/>
    <Routine name="attention_reminder"/>
    <Routine name="continue_instructions_even_further_11"/>
    <Routine name="calib_one"/>
    <Routine name="calib_last"/>
    <Routine name="advance_to_practice_session"/>
    <LoopInitiator loopType="TrialHandler" name="prac_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$'conditions/practice_task_option_' + excel_sheet_choice_practice + '.xlsx'" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="prac_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practice_task"/>
    <Routine name="isi_screen"/>
    <LoopInitiator loopType="TrialHandler" name="missed_trial">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$draw_miss" valType="code"/>
      <Param name="name" updates="None" val="missed_trial" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="missed_trial_logic"/>
    <LoopTerminator name="missed_trial"/>
    <LoopInitiator loopType="TrialHandler" name="no_feedback_work_trial">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$do_not_do_feedback" valType="code"/>
      <Param name="name" updates="None" val="no_feedback_work_trial" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="no_feedback_work_logic"/>
    <LoopTerminator name="no_feedback_work_trial"/>
    <LoopInitiator loopType="TrialHandler" name="feedback_work_trial">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$do_feedback" valType="code"/>
      <Param name="name" updates="None" val="feedback_work_trial" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="grey_work_for_fb"/>
    <Routine name="ask_want_to_work_for_feedback"/>
    <LoopInitiator loopType="TrialHandler" name="no_loop_highlight">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$highlight_no" valType="code"/>
      <Param name="name" updates="None" val="no_loop_highlight" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="no_fb_highlight"/>
    <LoopTerminator name="no_loop_highlight"/>
    <LoopInitiator loopType="TrialHandler" name="yes_loop_highlight">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$highlight_yes" valType="code"/>
      <Param name="name" updates="None" val="yes_loop_highlight" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="yes_fb_highlight"/>
    <Routine name="fb_work_time"/>
    <Routine name="draw_feedback_to_screen"/>
    <Routine name="post_work_blank"/>
    <LoopTerminator name="yes_loop_highlight"/>
    <LoopTerminator name="feedback_work_trial"/>
    <Routine name="end_loop_data_log"/>
    <LoopTerminator name="prac_trials"/>
    <Routine name="blank_screen_2"/>
    <Routine name="second_quiz"/>
    <Routine name="second_quiz_first_question"/>
    <Routine name="second_quiz_first_question_reminder"/>
    <Routine name="second_quiz_second_question"/>
    <Routine name="second_quiz_second_question_reminder"/>
    <Routine name="second_quiz_third_question"/>
    <Routine name="second_quiz_third_question_reminder"/>
    <Routine name="last_stim_reminder"/>
    <Routine name="advance_to_main_task"/>
    <LoopInitiator loopType="TrialHandler" name="main_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$'conditions/main_task_option_' + excel_sheet_choice_main + '.xlsx'" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="main_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="main_task"/>
    <Routine name="isi_screen"/>
    <LoopInitiator loopType="TrialHandler" name="missed_trial_main_task">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$draw_miss" valType="code"/>
      <Param name="name" updates="None" val="missed_trial_main_task" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="missed_trial_logic"/>
    <LoopTerminator name="missed_trial_main_task"/>
    <LoopInitiator loopType="TrialHandler" name="no_feedback_work_trial_main">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$do_not_do_feedback" valType="code"/>
      <Param name="name" updates="None" val="no_feedback_work_trial_main" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="no_feedback_work_logic"/>
    <LoopTerminator name="no_feedback_work_trial_main"/>
    <LoopInitiator loopType="TrialHandler" name="feedback_work_trial_main">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$do_feedback" valType="code"/>
      <Param name="name" updates="None" val="feedback_work_trial_main" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="grey_work_for_fb"/>
    <Routine name="ask_want_to_work_for_feedback"/>
    <LoopInitiator loopType="TrialHandler" name="no_loop_highlight_main">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$highlight_no" valType="code"/>
      <Param name="name" updates="None" val="no_loop_highlight_main" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="no_fb_highlight"/>
    <LoopTerminator name="no_loop_highlight_main"/>
    <LoopInitiator loopType="TrialHandler" name="yes_loop_highlight_main">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$highlight_yes" valType="code"/>
      <Param name="name" updates="None" val="yes_loop_highlight_main" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="yes_fb_highlight"/>
    <Routine name="fb_work_time"/>
    <Routine name="draw_feedback_to_screen"/>
    <Routine name="post_work_blank"/>
    <LoopTerminator name="yes_loop_highlight_main"/>
    <LoopTerminator name="feedback_work_trial_main"/>
    <Routine name="end_loop_data_log"/>
    <LoopTerminator name="main_trials"/>
    <Routine name="blank_screen_2"/>
    <Routine name="completed_main_task"/>
    <Routine name="continue_to_fractal_question"/>
    <Routine name="post_task_fractal_question"/>
    <Routine name="SAM_hu_directions"/>
    <Routine name="SAM_hu_question_2"/>
    <Routine name="highlight_post_sam_hu"/>
    <Routine name="SAM_ec_directions"/>
    <Routine name="SAM_ec_question_2"/>
    <Routine name="highlight_sam_ec_post_choice"/>
    <Routine name="total_points_end_experiment"/>
  </Flow>
</PsychoPy2experiment>
